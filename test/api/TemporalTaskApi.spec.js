/**
 * Matroid Public API
 * The Matroid API allows you to easily manipulate and use detectors. You can browse through our fine-tuned detectors, customize detectors with your own images and videos, and even import your own tensorflow models as detectors. Public detectors are available for all of our users, and you can quickly train custom detectors when needed. You can further polish your detectors through our simple web GUI, where you can create composite detectors or topic detectors, give your detectors feedback, and automatically annotate training data.   Once you are happy with your detector, you can use it to classify images, locate objects in videos, and perform real-time detections in live video streams. Create a stream of your camera feed, and you can use our API to get real-time detections from your detector by creating Monitorings. You can also use our API to get the latest detections from your detector, and you can even get the latest detections from a specific time in the past. Feel free to use this documentation page to learn and test out your API requests. But be careful! **Any changes performed may be permanent.**   ## Getting Started  To get started with the Matroid API, you will need to create an account and obtain an API key. You can do this by signing up on our website. Once you have your API key, you can start using the API to create and manage detectors.  ## Authentication  The Matroid API uses bearer token authentication. You will need to include your API key in the Authorization header of your requests. For example:  ``` Authorization: Bearer YOUR_API_KEY ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MatroidPublicApi);
  }
}(this, function(expect, MatroidPublicApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MatroidPublicApi.TemporalTaskApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TemporalTaskApi', function() {
    describe('apiV1MonitoringsMonitoringIdProcessClipsPost', function() {
      it('should call apiV1MonitoringsMonitoringIdProcessClipsPost successfully', function(done) {
        //uncomment below and update the code to test apiV1MonitoringsMonitoringIdProcessClipsPost
        //instance.apiV1MonitoringsMonitoringIdProcessClipsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiV1StreamsStreamIdSampleStreamPost', function() {
      it('should call apiV1StreamsStreamIdSampleStreamPost successfully', function(done) {
        //uncomment below and update the code to test apiV1StreamsStreamIdSampleStreamPost
        //instance.apiV1StreamsStreamIdSampleStreamPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiV1StreamsStreamIdTemporalTaskPost', function() {
      it('should call apiV1StreamsStreamIdTemporalTaskPost successfully', function(done) {
        //uncomment below and update the code to test apiV1StreamsStreamIdTemporalTaskPost
        //instance.apiV1StreamsStreamIdTemporalTaskPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiV1StreamsStreamIdTemporalTasksGet', function() {
      it('should call apiV1StreamsStreamIdTemporalTasksGet successfully', function(done) {
        //uncomment below and update the code to test apiV1StreamsStreamIdTemporalTasksGet
        //instance.apiV1StreamsStreamIdTemporalTasksGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiV1TemporalTaskPost', function() {
      it('should call apiV1TemporalTaskPost successfully', function(done) {
        //uncomment below and update the code to test apiV1TemporalTaskPost
        //instance.apiV1TemporalTaskPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiV1TemporalTasksGet', function() {
      it('should call apiV1TemporalTasksGet successfully', function(done) {
        //uncomment below and update the code to test apiV1TemporalTasksGet
        //instance.apiV1TemporalTasksGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiV1TemporalTasksTaskIdDelete', function() {
      it('should call apiV1TemporalTasksTaskIdDelete successfully', function(done) {
        //uncomment below and update the code to test apiV1TemporalTasksTaskIdDelete
        //instance.apiV1TemporalTasksTaskIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiV1TemporalTasksTaskIdGet', function() {
      it('should call apiV1TemporalTasksTaskIdGet successfully', function(done) {
        //uncomment below and update the code to test apiV1TemporalTasksTaskIdGet
        //instance.apiV1TemporalTasksTaskIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiV1TemporalTasksTaskIdKillPut', function() {
      it('should call apiV1TemporalTasksTaskIdKillPut successfully', function(done) {
        //uncomment below and update the code to test apiV1TemporalTasksTaskIdKillPut
        //instance.apiV1TemporalTasksTaskIdKillPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiV1TemporalTasksTaskIdPredsJsonGet', function() {
      it('should call apiV1TemporalTasksTaskIdPredsJsonGet successfully', function(done) {
        //uncomment below and update the code to test apiV1TemporalTasksTaskIdPredsJsonGet
        //instance.apiV1TemporalTasksTaskIdPredsJsonGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
