/**
 * Matroid Public API
 * The Matroid API allows you to easily manipulate and use detectors. You can browse through our fine-tuned detectors, customize detectors with your own images and videos, and even import your own tensorflow models as detectors. Public detectors are available for all of our users, and you can quickly train custom detectors when needed. You can further polish your detectors through our simple web GUI, where you can create composite detectors or topic detectors, give your detectors feedback, and automatically annotate training data.   Once you are happy with your detector, you can use it to classify images, locate objects in videos, and perform real-time detections in live video streams. Create a stream of your camera feed, and you can use our API to get real-time detections from your detector by creating Monitorings. You can also use our API to get the latest detections from your detector, and you can even get the latest detections from a specific time in the past. Feel free to use this documentation page to learn and test out your API requests. But be careful! **Any changes performed may be permanent.**   ## Getting Started  To get started with the Matroid API, you will need to create an account and obtain an API key. You can do this by signing up on our website. Once you have your API key, you can start using the API to create and manage detectors.  ## Authentication  The Matroid API uses bearer token authentication. You will need to include your API key in the Authorization header of your requests. For example:  ``` Authorization: Bearer YOUR_API_KEY ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiV1MonitoringsMonitoringIdPut200ResponseDetectionMonitoringFilter from './ApiV1MonitoringsMonitoringIdPut200ResponseDetectionMonitoringFilter';

/**
 * The ApiV1MonitoringsMonitoringIdPut200ResponseDetection model module.
 * @module model/ApiV1MonitoringsMonitoringIdPut200ResponseDetection
 * @version 1.0.0
 */
class ApiV1MonitoringsMonitoringIdPut200ResponseDetection {
    /**
     * Constructs a new <code>ApiV1MonitoringsMonitoringIdPut200ResponseDetection</code>.
     * The detection details of the monitoring
     * @alias module:model/ApiV1MonitoringsMonitoringIdPut200ResponseDetection
     */
    constructor() { 
        
        ApiV1MonitoringsMonitoringIdPut200ResponseDetection.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApiV1MonitoringsMonitoringIdPut200ResponseDetection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiV1MonitoringsMonitoringIdPut200ResponseDetection} obj Optional instance to populate.
     * @return {module:model/ApiV1MonitoringsMonitoringIdPut200ResponseDetection} The populated <code>ApiV1MonitoringsMonitoringIdPut200ResponseDetection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiV1MonitoringsMonitoringIdPut200ResponseDetection();

            if (data.hasOwnProperty('thresholds')) {
                obj['thresholds'] = ApiClient.convertToType(data['thresholds'], ['String']);
            }
            if (data.hasOwnProperty('monitoringFilter')) {
                obj['monitoringFilter'] = ApiV1MonitoringsMonitoringIdPut200ResponseDetectionMonitoringFilter.constructFromObject(data['monitoringFilter']);
            }
            if (data.hasOwnProperty('labelNamesToDetect')) {
                obj['labelNamesToDetect'] = ApiClient.convertToType(data['labelNamesToDetect'], ['String']);
            }
            if (data.hasOwnProperty('classesToDetect')) {
                obj['classesToDetect'] = ApiClient.convertToType(data['classesToDetect'], ['String']);
            }
            if (data.hasOwnProperty('notificationAlertSounds')) {
                obj['notificationAlertSounds'] = ApiClient.convertToType(data['notificationAlertSounds'], ['String']);
            }
            if (data.hasOwnProperty('unknownThreshold')) {
                obj['unknownThreshold'] = ApiClient.convertToType(data['unknownThreshold'], 'Number');
            }
            if (data.hasOwnProperty('maxEmailsPerHourPerClass')) {
                obj['maxEmailsPerHourPerClass'] = ApiClient.convertToType(data['maxEmailsPerHourPerClass'], 'Number');
            }
            if (data.hasOwnProperty('minEmailInterval')) {
                obj['minEmailInterval'] = ApiClient.convertToType(data['minEmailInterval'], 'Number');
            }
            if (data.hasOwnProperty('newDetectionsCount')) {
                obj['newDetectionsCount'] = ApiClient.convertToType(data['newDetectionsCount'], 'Number');
            }
            if (data.hasOwnProperty('minDetectionInterval')) {
                obj['minDetectionInterval'] = ApiClient.convertToType(data['minDetectionInterval'], 'Number');
            }
            if (data.hasOwnProperty('maxEmailsPerHourUnknown')) {
                obj['maxEmailsPerHourUnknown'] = ApiClient.convertToType(data['maxEmailsPerHourUnknown'], 'Number');
            }
            if (data.hasOwnProperty('minEmailIntervalUnknown')) {
                obj['minEmailIntervalUnknown'] = ApiClient.convertToType(data['minEmailIntervalUnknown'], 'Number');
            }
            if (data.hasOwnProperty('sendEmailNotifications')) {
                obj['sendEmailNotifications'] = ApiClient.convertToType(data['sendEmailNotifications'], 'Boolean');
            }
            if (data.hasOwnProperty('desktopNotifications')) {
                obj['desktopNotifications'] = ApiClient.convertToType(data['desktopNotifications'], 'Boolean');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('detectorName')) {
                obj['detectorName'] = ApiClient.convertToType(data['detectorName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiV1MonitoringsMonitoringIdPut200ResponseDetection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiV1MonitoringsMonitoringIdPut200ResponseDetection</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['thresholds'])) {
            throw new Error("Expected the field `thresholds` to be an array in the JSON data but got " + data['thresholds']);
        }
        // validate the optional field `monitoringFilter`
        if (data['monitoringFilter']) { // data not null
          ApiV1MonitoringsMonitoringIdPut200ResponseDetectionMonitoringFilter.validateJSON(data['monitoringFilter']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['labelNamesToDetect'])) {
            throw new Error("Expected the field `labelNamesToDetect` to be an array in the JSON data but got " + data['labelNamesToDetect']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['classesToDetect'])) {
            throw new Error("Expected the field `classesToDetect` to be an array in the JSON data but got " + data['classesToDetect']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['notificationAlertSounds'])) {
            throw new Error("Expected the field `notificationAlertSounds` to be an array in the JSON data but got " + data['notificationAlertSounds']);
        }
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // ensure the json data is a string
        if (data['detectorName'] && !(typeof data['detectorName'] === 'string' || data['detectorName'] instanceof String)) {
            throw new Error("Expected the field `detectorName` to be a primitive type in the JSON string but got " + data['detectorName']);
        }

        return true;
    }


}



/**
 * The updated thresholds of the monitoring
 * @member {Array.<String>} thresholds
 */
ApiV1MonitoringsMonitoringIdPut200ResponseDetection.prototype['thresholds'] = undefined;

/**
 * @member {module:model/ApiV1MonitoringsMonitoringIdPut200ResponseDetectionMonitoringFilter} monitoringFilter
 */
ApiV1MonitoringsMonitoringIdPut200ResponseDetection.prototype['monitoringFilter'] = undefined;

/**
 * @member {Array.<String>} labelNamesToDetect
 */
ApiV1MonitoringsMonitoringIdPut200ResponseDetection.prototype['labelNamesToDetect'] = undefined;

/**
 * @member {Array.<String>} classesToDetect
 */
ApiV1MonitoringsMonitoringIdPut200ResponseDetection.prototype['classesToDetect'] = undefined;

/**
 * @member {Array.<String>} notificationAlertSounds
 */
ApiV1MonitoringsMonitoringIdPut200ResponseDetection.prototype['notificationAlertSounds'] = undefined;

/**
 * @member {Number} unknownThreshold
 */
ApiV1MonitoringsMonitoringIdPut200ResponseDetection.prototype['unknownThreshold'] = undefined;

/**
 * @member {Number} maxEmailsPerHourPerClass
 */
ApiV1MonitoringsMonitoringIdPut200ResponseDetection.prototype['maxEmailsPerHourPerClass'] = undefined;

/**
 * @member {Number} minEmailInterval
 */
ApiV1MonitoringsMonitoringIdPut200ResponseDetection.prototype['minEmailInterval'] = undefined;

/**
 * @member {Number} newDetectionsCount
 */
ApiV1MonitoringsMonitoringIdPut200ResponseDetection.prototype['newDetectionsCount'] = undefined;

/**
 * @member {Number} minDetectionInterval
 */
ApiV1MonitoringsMonitoringIdPut200ResponseDetection.prototype['minDetectionInterval'] = undefined;

/**
 * @member {Number} maxEmailsPerHourUnknown
 */
ApiV1MonitoringsMonitoringIdPut200ResponseDetection.prototype['maxEmailsPerHourUnknown'] = undefined;

/**
 * @member {Number} minEmailIntervalUnknown
 */
ApiV1MonitoringsMonitoringIdPut200ResponseDetection.prototype['minEmailIntervalUnknown'] = undefined;

/**
 * @member {Boolean} sendEmailNotifications
 */
ApiV1MonitoringsMonitoringIdPut200ResponseDetection.prototype['sendEmailNotifications'] = undefined;

/**
 * @member {Boolean} desktopNotifications
 */
ApiV1MonitoringsMonitoringIdPut200ResponseDetection.prototype['desktopNotifications'] = undefined;

/**
 * @member {String} network
 */
ApiV1MonitoringsMonitoringIdPut200ResponseDetection.prototype['network'] = undefined;

/**
 * @member {String} detectorName
 */
ApiV1MonitoringsMonitoringIdPut200ResponseDetection.prototype['detectorName'] = undefined;






export default ApiV1MonitoringsMonitoringIdPut200ResponseDetection;

