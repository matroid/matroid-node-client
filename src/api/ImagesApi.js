/**
 * Matroid Public API
 * The Matroid API allows you to easily manipulate and use detectors. You can browse through our fine-tuned detectors, customize detectors with your own images and videos, and even import your own tensorflow models as detectors. Public detectors are available for all of our users, and you can quickly train custom detectors when needed. You can further polish your detectors through our simple web GUI, where you can create composite detectors or topic detectors, give your detectors feedback, and automatically annotate training data.   Once you are happy with your detector, you can use it to classify images, locate objects in videos, and perform real-time detections in live video streams. Create a stream of your camera feed, and you can use our API to get real-time detections from your detector by creating Monitorings. You can also use our API to get the latest detections from your detector, and you can even get the latest detections from a specific time in the past. Feel free to use this documentation page to learn and test out your API requests. But be careful! **Any changes performed may be permanent.**   ## Getting Started  To get started with the Matroid API, you will need to create an account and obtain an API key. You can do this by signing up on our website. Once you have your API key, you can start using the API to create and manage detectors.  ## Authentication  The Matroid API uses bearer token authentication. You will need to include your API key in the Authorization header of your requests. For example:  ``` Authorization: Bearer YOUR_API_KEY ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiV1DetectorsDetectorIdClassifyImagePost200Response from '../model/ApiV1DetectorsDetectorIdClassifyImagePost200Response';
import ApiV1DetectorsDetectorIdGetSaliencyMapPost200Response from '../model/ApiV1DetectorsDetectorIdGetSaliencyMapPost200Response';
import ApiV1LocalizePost200Response from '../model/ApiV1LocalizePost200Response';

/**
* Images service.
* @module api/ImagesApi
* @version 1.0.0
*/
export default class ImagesApi {

    /**
    * Constructs a new ImagesApi. 
    * @alias module:api/ImagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV1DetectorsDetectorIdClassifyImagePost operation.
     * @callback module:api/ImagesApi~apiV1DetectorsDetectorIdClassifyImagePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1DetectorsDetectorIdClassifyImagePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Classify image
     * Classifies one or more images using a detector. Note, the `classify_image` API call works for localizers as well and should be preferred over `localize_image`.
     * @param {String} detectorId ID of the detector to use for classification
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [url] URL(s) of image(s) to classify
     * @param {Array.<File>} [file] Image file(s) to classify
     * @param {Number} [localizationConfidence = 0.5)] Minimum confidence threshold for localizations
     * @param {Number} [numResults = 20)] Maximum number of results to return
     * @param {module:api/ImagesApi~apiV1DetectorsDetectorIdClassifyImagePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1DetectorsDetectorIdClassifyImagePost200Response}
     */
    apiV1DetectorsDetectorIdClassifyImagePost(detectorId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'detectorId' is set
      if (detectorId === undefined || detectorId === null) {
        throw new Error("Missing the required parameter 'detectorId' when calling apiV1DetectorsDetectorIdClassifyImagePost");
      }

      let pathParams = {
        'detectorId': detectorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'url': this.apiClient.buildCollectionParam(opts['url'], 'csv'),
        'file': this.apiClient.buildCollectionParam(opts['file'], 'passthrough'),
        'localizationConfidence': opts['localizationConfidence'],
        'numResults': opts['numResults']
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApiV1DetectorsDetectorIdClassifyImagePost200Response;
      return this.apiClient.callApi(
        '/api/v1/detectors/{detectorId}/classify_image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1DetectorsDetectorIdGetSaliencyMapPost operation.
     * @callback module:api/ImagesApi~apiV1DetectorsDetectorIdGetSaliencyMapPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1DetectorsDetectorIdGetSaliencyMapPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get saliency map
     * Generate a saliency map for an image using a specified detector. One of file, imageId, or url must be provided.
     * @param {String} detectorId ID of the detector to use
     * @param {String} version API version identifier (e.g. \"v1\")
     * @param {Number} classIdx Class index for saliency map generation
     * @param {Object} opts Optional parameters
     * @param {File} [file] Image file to process
     * @param {String} [imageId] ID of an existing image
     * @param {String} [url] URL of the image to process
     * @param {module:api/ImagesApi~apiV1DetectorsDetectorIdGetSaliencyMapPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1DetectorsDetectorIdGetSaliencyMapPost200Response}
     */
    apiV1DetectorsDetectorIdGetSaliencyMapPost(detectorId, version, classIdx, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'detectorId' is set
      if (detectorId === undefined || detectorId === null) {
        throw new Error("Missing the required parameter 'detectorId' when calling apiV1DetectorsDetectorIdGetSaliencyMapPost");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling apiV1DetectorsDetectorIdGetSaliencyMapPost");
      }
      // verify the required parameter 'classIdx' is set
      if (classIdx === undefined || classIdx === null) {
        throw new Error("Missing the required parameter 'classIdx' when calling apiV1DetectorsDetectorIdGetSaliencyMapPost");
      }

      let pathParams = {
        'detectorId': detectorId
      };
      let queryParams = {
        'version': version,
        'class_idx': classIdx
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file'],
        'imageId': opts['imageId'],
        'url': opts['url']
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApiV1DetectorsDetectorIdGetSaliencyMapPost200Response;
      return this.apiClient.callApi(
        '/api/v1/detectors/{detectorId}/get_saliency_map', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1LocalizePost operation.
     * @callback module:api/ImagesApi~apiV1LocalizePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1LocalizePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Localize objects in images
     * This API is very similar to the classify endpoint. However, it can be used to update bounding boxes of existing training images by supplying `update=true`, `labelId`, and one of `imageId` or `imageIds`. It also has access to the internal face localizer (`localizer=\"DEFAULT_FACE\"` and `localizerLabel=\"face\"`). After receiving the results, perform the actual update using the Update Annotations endpoint. Note, the `classify_image` API call works for localizers as well and should be preferred over `localize_image` for inference.
     * @param {String} localizer Unique ID of the detector (must support localization) or \\\"face\\\"
     * @param {String} localizerLabel Name of the label to detect
     * @param {Object} opts Optional parameters
     * @param {Number} [confidence] Minimum confidence level for predictions
     * @param {File} [file] One or more image files
     * @param {Array.<String>} [url] One or more image URLs
     * @param {Boolean} [update = false)] Whether to update the bounding boxes of existing training images.
     * @param {Number} [maxFaces] Maximum number of face localizations per image. Only relevant when using the default face localizer (i.e. localizer=\\\"DEFAULT_FACE\\\" and localizerLabel=\\\"face\\\")
     * @param {String} [labelId] Unique ID of the label for which to update images. Only relevant when updating (i.e. update=true)
     * @param {String} [imageId] Image ID. Only relevant when updating (i.e. update=true)
     * @param {Array.<String>} [imageIds] One or more image IDs. Only relevant when updating (i.e. update=true)
     * @param {module:api/ImagesApi~apiV1LocalizePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1LocalizePost200Response}
     */
    apiV1LocalizePost(localizer, localizerLabel, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'localizer' is set
      if (localizer === undefined || localizer === null) {
        throw new Error("Missing the required parameter 'localizer' when calling apiV1LocalizePost");
      }
      // verify the required parameter 'localizerLabel' is set
      if (localizerLabel === undefined || localizerLabel === null) {
        throw new Error("Missing the required parameter 'localizerLabel' when calling apiV1LocalizePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'localizer': localizer,
        'localizerLabel': localizerLabel,
        'confidence': opts['confidence'],
        'file': opts['file'],
        'url': this.apiClient.buildCollectionParam(opts['url'], 'csv'),
        'update': opts['update'],
        'maxFaces': opts['maxFaces'],
        'labelId': opts['labelId'],
        'imageId': opts['imageId'],
        'imageIds': this.apiClient.buildCollectionParam(opts['imageIds'], 'csv')
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApiV1LocalizePost200Response;
      return this.apiClient.callApi(
        '/api/v1/localize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
