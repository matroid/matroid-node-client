/**
 * Matroid Public API
 * The Matroid API allows you to easily manipulate and use detectors. You can browse through our fine-tuned detectors, customize detectors with your own images and videos, and even import your own tensorflow models as detectors. Public detectors are available for all of our users, and you can quickly train custom detectors when needed. You can further polish your detectors through our simple web GUI, where you can create composite detectors or topic detectors, give your detectors feedback, and automatically annotate training data.   Once you are happy with your detector, you can use it to classify images, locate objects in videos, and perform real-time detections in live video streams. Create a stream of your camera feed, and you can use our API to get real-time detections from your detector by creating Monitorings. You can also use our API to get the latest detections from your detector, and you can even get the latest detections from a specific time in the past. Feel free to use this documentation page to learn and test out your API requests. But be careful! **Any changes performed may be permanent.**   ## Getting Started  To get started with the Matroid API, you will need to create an account and obtain an API key. You can do this by signing up on our website. Once you have your API key, you can start using the API to create and manage detectors.  ## Authentication  The Matroid API uses bearer token authentication. You will need to include your API key in the Authorization header of your requests. For example:  ``` Authorization: Bearer YOUR_API_KEY ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiV1BucketTasksPost400Response from '../model/ApiV1BucketTasksPost400Response';
import ApiV1StreamsBatchPost200ResponseValue from '../model/ApiV1StreamsBatchPost200ResponseValue';
import ApiV1StreamsGet200ResponseInner from '../model/ApiV1StreamsGet200ResponseInner';
import ApiV1StreamsPost200Response from '../model/ApiV1StreamsPost200Response';
import ApiV1StreamsPostRequest from '../model/ApiV1StreamsPostRequest';
import ApiV1StreamsStreamIdClipsGet200Response from '../model/ApiV1StreamsStreamIdClipsGet200Response';
import ApiV1StreamsStreamIdDelete200Response from '../model/ApiV1StreamsStreamIdDelete200Response';
import ApiV1StreamsStreamIdPushImagePost200Response from '../model/ApiV1StreamsStreamIdPushImagePost200Response';
import ApiV1StreamsStreamIdPushImagePost400Response from '../model/ApiV1StreamsStreamIdPushImagePost400Response';
import ApiV1StreamsStreamIdPushVideoPost200Response from '../model/ApiV1StreamsStreamIdPushVideoPost200Response';
import ApiV1StreamsStreamIdPut200Response from '../model/ApiV1StreamsStreamIdPut200Response';
import ApiV1StreamsStreamIdPutRequest from '../model/ApiV1StreamsStreamIdPutRequest';

/**
* Streams service.
* @module api/StreamsApi
* @version 1.0.0
*/
export default class StreamsApi {

    /**
    * Constructs a new StreamsApi. 
    * @alias module:api/StreamsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV1FrameRecordingsTaskIdDownloadGet operation.
     * @callback module:api/StreamsApi~apiV1FrameRecordingsTaskIdDownloadGetCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download frame recording
     * Downloads a frame recording's frames as a zip file.
     * @param {String} taskId Unique ID of the frame recording task
     * @param {module:api/StreamsApi~apiV1FrameRecordingsTaskIdDownloadGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    apiV1FrameRecordingsTaskIdDownloadGet(taskId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling apiV1FrameRecordingsTaskIdDownloadGet");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/zip'];
      let returnType = File;
      return this.apiClient.callApi(
        '/api/v1/frame-recordings/{taskId}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StreamsBatchPost operation.
     * @callback module:api/StreamsApi~apiV1StreamsBatchPostCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{String: ApiV1StreamsBatchPost200ResponseValue}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Batch create streams
     * Creates a batch of streams & monitorings
     * @param {Object} opts Optional parameters
     * @param {File} [file] JSON file containing stream and monitoring configurations
     * @param {module:api/StreamsApi~apiV1StreamsBatchPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{String: ApiV1StreamsBatchPost200ResponseValue}>}
     */
    apiV1StreamsBatchPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data', 'application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': ApiV1StreamsBatchPost200ResponseValue};
      return this.apiClient.callApi(
        '/api/v1/streams/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StreamsGet operation.
     * @callback module:api/StreamsApi~apiV1StreamsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApiV1StreamsGet200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search streams
     * Returns streams that match the specified query parameters
     * @param {Object} opts Optional parameters
     * @param {String} [streamId] Unique ID of the stream
     * @param {String} [name] Name of the stream
     * @param {module:model/String} [permission = 'all')] Filter streams by permission level
     * @param {Boolean} [recordingEnabled] Filter streams with recording enabled
     * @param {module:api/StreamsApi~apiV1StreamsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApiV1StreamsGet200ResponseInner>}
     */
    apiV1StreamsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'streamId': opts['streamId'],
        'name': opts['name'],
        'permission': opts['permission'],
        'recordingEnabled': opts['recordingEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ApiV1StreamsGet200ResponseInner];
      return this.apiClient.callApi(
        '/api/v1/streams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StreamsPost operation.
     * @callback module:api/StreamsApi~apiV1StreamsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1StreamsPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create stream
     * Registers a stream.
     * @param {module:model/ApiV1StreamsPostRequest} apiV1StreamsPostRequest 
     * @param {module:api/StreamsApi~apiV1StreamsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1StreamsPost200Response}
     */
    apiV1StreamsPost(apiV1StreamsPostRequest, callback) {
      let postBody = apiV1StreamsPostRequest;
      // verify the required parameter 'apiV1StreamsPostRequest' is set
      if (apiV1StreamsPostRequest === undefined || apiV1StreamsPostRequest === null) {
        throw new Error("Missing the required parameter 'apiV1StreamsPostRequest' when calling apiV1StreamsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiV1StreamsPost200Response;
      return this.apiClient.callApi(
        '/api/v1/streams', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StreamsStreamIdClipsDateClipIdGet operation.
     * @callback module:api/StreamsApi~apiV1StreamsStreamIdClipsDateClipIdGetCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get recording clip
     * Retrieves a clip video file from the recording
     * @param {String} streamId Unique ID of the stream
     * @param {String} date Date in YYYYMMDD format
     * @param {String} clipId ID of the clip to retrieve
     * @param {module:api/StreamsApi~apiV1StreamsStreamIdClipsDateClipIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    apiV1StreamsStreamIdClipsDateClipIdGet(streamId, date, clipId, callback) {
      let postBody = null;
      // verify the required parameter 'streamId' is set
      if (streamId === undefined || streamId === null) {
        throw new Error("Missing the required parameter 'streamId' when calling apiV1StreamsStreamIdClipsDateClipIdGet");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling apiV1StreamsStreamIdClipsDateClipIdGet");
      }
      // verify the required parameter 'clipId' is set
      if (clipId === undefined || clipId === null) {
        throw new Error("Missing the required parameter 'clipId' when calling apiV1StreamsStreamIdClipsDateClipIdGet");
      }

      let pathParams = {
        'streamId': streamId,
        'date': date,
        'clipId': clipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['video/mp2t', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/api/v1/streams/{streamId}/clips/{date}/{clipId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StreamsStreamIdClipsGet operation.
     * @callback module:api/StreamsApi~apiV1StreamsStreamIdClipsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1StreamsStreamIdClipsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find recording clips
     * Returns links to recording clips around your query
     * @param {String} streamId Unique ID of the stream
     * @param {Date} startTime Exclude clips that end before this timestamp
     * @param {Date} endTime Exclude clips that start after this timestamp. endTime cannot be more than 1 hour greater than startTime
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format = 'json')] Response format
     * @param {module:api/StreamsApi~apiV1StreamsStreamIdClipsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1StreamsStreamIdClipsGet200Response}
     */
    apiV1StreamsStreamIdClipsGet(streamId, startTime, endTime, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'streamId' is set
      if (streamId === undefined || streamId === null) {
        throw new Error("Missing the required parameter 'streamId' when calling apiV1StreamsStreamIdClipsGet");
      }
      // verify the required parameter 'startTime' is set
      if (startTime === undefined || startTime === null) {
        throw new Error("Missing the required parameter 'startTime' when calling apiV1StreamsStreamIdClipsGet");
      }
      // verify the required parameter 'endTime' is set
      if (endTime === undefined || endTime === null) {
        throw new Error("Missing the required parameter 'endTime' when calling apiV1StreamsStreamIdClipsGet");
      }

      let pathParams = {
        'streamId': streamId
      };
      let queryParams = {
        'startTime': startTime,
        'endTime': endTime,
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/x-mpegURL'];
      let returnType = ApiV1StreamsStreamIdClipsGet200Response;
      return this.apiClient.callApi(
        '/api/v1/streams/{streamId}/clips', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StreamsStreamIdDelete operation.
     * @callback module:api/StreamsApi~apiV1StreamsStreamIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1StreamsStreamIdDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a stream
     * Deletes a stream and all associated resources including feed tasks, collections, and S3 content
     * @param {String} streamId Unique ID of the stream to delete
     * @param {module:api/StreamsApi~apiV1StreamsStreamIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1StreamsStreamIdDelete200Response}
     */
    apiV1StreamsStreamIdDelete(streamId, callback) {
      let postBody = null;
      // verify the required parameter 'streamId' is set
      if (streamId === undefined || streamId === null) {
        throw new Error("Missing the required parameter 'streamId' when calling apiV1StreamsStreamIdDelete");
      }

      let pathParams = {
        'streamId': streamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV1StreamsStreamIdDelete200Response;
      return this.apiClient.callApi(
        '/api/v1/streams/{streamId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StreamsStreamIdPushImagePost operation.
     * @callback module:api/StreamsApi~apiV1StreamsStreamIdPushImagePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1StreamsStreamIdPushImagePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Push image to stream
     * For ApiImagePush streams, this pushes a new image into the stream. You can optionally specify a timestamp to associate with this image.
     * @param {String} streamId Unique ID of the stream
     * @param {Object} file Image file to upload
     * @param {Object} opts Optional parameters
     * @param {Date} [timestamp] ISO date/time to associate with this image
     * @param {String} [metadata] Stringified JSON object of metadata associated with a detection
     * @param {module:api/StreamsApi~apiV1StreamsStreamIdPushImagePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1StreamsStreamIdPushImagePost200Response}
     */
    apiV1StreamsStreamIdPushImagePost(streamId, file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'streamId' is set
      if (streamId === undefined || streamId === null) {
        throw new Error("Missing the required parameter 'streamId' when calling apiV1StreamsStreamIdPushImagePost");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling apiV1StreamsStreamIdPushImagePost");
      }

      let pathParams = {
        'streamId': streamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'timestamp': opts['timestamp'],
        'metadata': opts['metadata']
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApiV1StreamsStreamIdPushImagePost200Response;
      return this.apiClient.callApi(
        '/api/v1/streams/{streamId}/push_image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StreamsStreamIdPushVideoPost operation.
     * @callback module:api/StreamsApi~apiV1StreamsStreamIdPushVideoPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1StreamsStreamIdPushVideoPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Push video file to stream
     * Inserts a video clip into this stream's history at a particular timestamp. The clip will be available to view in the recording player starting at that timestamp.  If multiple clips are uploaded for the same time period, the overlapping sections will be overwritten.  Uploaded clips are subject to stream retention settings.  Most common video container and encoding formats are supported. H264 is the preferred video encoding format. Videos using other encodings are automatically re-encoded to H264, to support HLS browser playback.  Maximum file size is 1GB in cloud, and unlimited for onprem. 
     * @param {String} streamId Unique ID of the stream
     * @param {Object} file Video file to upload
     * @param {Date} startTime ISO date/time associated with the start of this video
     * @param {module:api/StreamsApi~apiV1StreamsStreamIdPushVideoPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1StreamsStreamIdPushVideoPost200Response}
     */
    apiV1StreamsStreamIdPushVideoPost(streamId, file, startTime, callback) {
      let postBody = null;
      // verify the required parameter 'streamId' is set
      if (streamId === undefined || streamId === null) {
        throw new Error("Missing the required parameter 'streamId' when calling apiV1StreamsStreamIdPushVideoPost");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling apiV1StreamsStreamIdPushVideoPost");
      }
      // verify the required parameter 'startTime' is set
      if (startTime === undefined || startTime === null) {
        throw new Error("Missing the required parameter 'startTime' when calling apiV1StreamsStreamIdPushVideoPost");
      }

      let pathParams = {
        'streamId': streamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'startTime': startTime
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApiV1StreamsStreamIdPushVideoPost200Response;
      return this.apiClient.callApi(
        '/api/v1/streams/{streamId}/push_video', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StreamsStreamIdPut operation.
     * @callback module:api/StreamsApi~apiV1StreamsStreamIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1StreamsStreamIdPut200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a stream
     * Update an existing stream's configuration including name, retention settings, and custom fields
     * @param {String} streamId Feed document mongo id for the stream
     * @param {module:model/ApiV1StreamsStreamIdPutRequest} apiV1StreamsStreamIdPutRequest 
     * @param {module:api/StreamsApi~apiV1StreamsStreamIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1StreamsStreamIdPut200Response}
     */
    apiV1StreamsStreamIdPut(streamId, apiV1StreamsStreamIdPutRequest, callback) {
      let postBody = apiV1StreamsStreamIdPutRequest;
      // verify the required parameter 'streamId' is set
      if (streamId === undefined || streamId === null) {
        throw new Error("Missing the required parameter 'streamId' when calling apiV1StreamsStreamIdPut");
      }
      // verify the required parameter 'apiV1StreamsStreamIdPutRequest' is set
      if (apiV1StreamsStreamIdPutRequest === undefined || apiV1StreamsStreamIdPutRequest === null) {
        throw new Error("Missing the required parameter 'apiV1StreamsStreamIdPutRequest' when calling apiV1StreamsStreamIdPut");
      }

      let pathParams = {
        'streamId': streamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiV1StreamsStreamIdPut200Response;
      return this.apiClient.callApi(
        '/api/v1/streams/{streamId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
