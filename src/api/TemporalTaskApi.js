/**
 * Matroid Public API
 * The Matroid API allows you to easily manipulate and use detectors. You can browse through our fine-tuned detectors, customize detectors with your own images and videos, and even import your own tensorflow models as detectors. Public detectors are available for all of our users, and you can quickly train custom detectors when needed. You can further polish your detectors through our simple web GUI, where you can create composite detectors or topic detectors, give your detectors feedback, and automatically annotate training data.   Once you are happy with your detector, you can use it to classify images, locate objects in videos, and perform real-time detections in live video streams. Create a stream of your camera feed, and you can use our API to get real-time detections from your detector by creating Monitorings. You can also use our API to get the latest detections from your detector, and you can even get the latest detections from a specific time in the past. Feel free to use this documentation page to learn and test out your API requests. But be careful! **Any changes performed may be permanent.**   ## Getting Started  To get started with the Matroid API, you will need to create an account and obtain an API key. You can do this by signing up on our website. Once you have your API key, you can start using the API to create and manage detectors.  ## Authentication  The Matroid API uses bearer token authentication. You will need to include your API key in the Authorization header of your requests. For example:  ``` Authorization: Bearer YOUR_API_KEY ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiV1BucketTasksPost400Response from '../model/ApiV1BucketTasksPost400Response';
import ApiV1MonitoringsMonitoringIdProcessClipsPost200Response from '../model/ApiV1MonitoringsMonitoringIdProcessClipsPost200Response';
import ApiV1StreamsStreamIdSampleStreamPost200Response from '../model/ApiV1StreamsStreamIdSampleStreamPost200Response';
import ApiV1StreamsStreamIdTemporalTaskPost200Response from '../model/ApiV1StreamsStreamIdTemporalTaskPost200Response';
import ApiV1StreamsStreamIdTemporalTasksGet200Response from '../model/ApiV1StreamsStreamIdTemporalTasksGet200Response';
import ApiV1TemporalTasksGet200Response from '../model/ApiV1TemporalTasksGet200Response';
import ApiV1TemporalTasksTaskIdDelete200Response from '../model/ApiV1TemporalTasksTaskIdDelete200Response';
import ApiV1TemporalTasksTaskIdGet200Response from '../model/ApiV1TemporalTasksTaskIdGet200Response';
import ApiV1TemporalTasksTaskIdKillPut200Response from '../model/ApiV1TemporalTasksTaskIdKillPut200Response';

/**
* TemporalTask service.
* @module api/TemporalTaskApi
* @version 1.0.0
*/
export default class TemporalTaskApi {

    /**
    * Constructs a new TemporalTaskApi. 
    * @alias module:api/TemporalTaskApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV1MonitoringsMonitoringIdProcessClipsPost operation.
     * @callback module:api/TemporalTaskApi~apiV1MonitoringsMonitoringIdProcessClipsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1MonitoringsMonitoringIdProcessClipsPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Process existing stream clips with monitoring
     * Run a monitoring on an existing stream recording. This will remove existing detections for the time range.
     * @param {String} monitoringId Unique ID of the monitoring to run on the stream
     * @param {Object} opts Optional parameters
     * @param {Date} [startTime] ISO 8601 start time for processing (e.g. 2021-04-12T22:53:17.902Z)
     * @param {Date} [endTime] ISO 8601 end time for processing (e.g. 2021-04-13T22:53:17.902Z)
     * @param {module:api/TemporalTaskApi~apiV1MonitoringsMonitoringIdProcessClipsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1MonitoringsMonitoringIdProcessClipsPost200Response}
     */
    apiV1MonitoringsMonitoringIdProcessClipsPost(monitoringId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'monitoringId' is set
      if (monitoringId === undefined || monitoringId === null) {
        throw new Error("Missing the required parameter 'monitoringId' when calling apiV1MonitoringsMonitoringIdProcessClipsPost");
      }

      let pathParams = {
        'monitoringId': monitoringId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'startTime': opts['startTime'],
        'endTime': opts['endTime']
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApiV1MonitoringsMonitoringIdProcessClipsPost200Response;
      return this.apiClient.callApi(
        '/api/v1/monitorings/{monitoringId}/process-clips', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StreamsStreamIdSampleStreamPost operation.
     * @callback module:api/TemporalTaskApi~apiV1StreamsStreamIdSampleStreamPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1StreamsStreamIdSampleStreamPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sample frames from stream
     * Sample frames from a stream and populate as training data for target detector. 
     * @param {String} streamId Unique ID of the stream to sample from
     * @param {String} detectorId ID of the detector to populate with sampled frames
     * @param {String} label Name of the label to populate with sampled frames
     * @param {Date} startTime Temporal task start time
     * @param {Date} endTime Temporal task end time
     * @param {Object} opts Optional parameters
     * @param {Number} [fps = 1)] Frames per second to sample the video at
     * @param {module:api/TemporalTaskApi~apiV1StreamsStreamIdSampleStreamPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1StreamsStreamIdSampleStreamPost200Response}
     */
    apiV1StreamsStreamIdSampleStreamPost(streamId, detectorId, label, startTime, endTime, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'streamId' is set
      if (streamId === undefined || streamId === null) {
        throw new Error("Missing the required parameter 'streamId' when calling apiV1StreamsStreamIdSampleStreamPost");
      }
      // verify the required parameter 'detectorId' is set
      if (detectorId === undefined || detectorId === null) {
        throw new Error("Missing the required parameter 'detectorId' when calling apiV1StreamsStreamIdSampleStreamPost");
      }
      // verify the required parameter 'label' is set
      if (label === undefined || label === null) {
        throw new Error("Missing the required parameter 'label' when calling apiV1StreamsStreamIdSampleStreamPost");
      }
      // verify the required parameter 'startTime' is set
      if (startTime === undefined || startTime === null) {
        throw new Error("Missing the required parameter 'startTime' when calling apiV1StreamsStreamIdSampleStreamPost");
      }
      // verify the required parameter 'endTime' is set
      if (endTime === undefined || endTime === null) {
        throw new Error("Missing the required parameter 'endTime' when calling apiV1StreamsStreamIdSampleStreamPost");
      }

      let pathParams = {
        'streamId': streamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'detectorId': detectorId,
        'label': label,
        'startTime': startTime,
        'endTime': endTime,
        'fps': opts['fps']
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApiV1StreamsStreamIdSampleStreamPost200Response;
      return this.apiClient.callApi(
        '/api/v1/streams/{streamId}/sample-stream', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StreamsStreamIdTemporalTaskPost operation.
     * @callback module:api/TemporalTaskApi~apiV1StreamsStreamIdTemporalTaskPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1StreamsStreamIdTemporalTaskPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run temporal task inference on a stream
     * Localize actions in a stream using specified detectors and labels
     * @param {String} streamId Unique ID of the stream to localize actions in
     * @param {String} name Name of the temporal task
     * @param {Date} startTime Temporal task start time
     * @param {Date} endTime Temporal task end time
     * @param {String} detectorId ID of the detector to use
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [labels] Array of labels to detect
     * @param {Array.<Number>} [detectionThresholds] Array of detection thresholds for each label
     * @param {module:api/TemporalTaskApi~apiV1StreamsStreamIdTemporalTaskPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1StreamsStreamIdTemporalTaskPost200Response}
     */
    apiV1StreamsStreamIdTemporalTaskPost(streamId, name, startTime, endTime, detectorId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'streamId' is set
      if (streamId === undefined || streamId === null) {
        throw new Error("Missing the required parameter 'streamId' when calling apiV1StreamsStreamIdTemporalTaskPost");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling apiV1StreamsStreamIdTemporalTaskPost");
      }
      // verify the required parameter 'startTime' is set
      if (startTime === undefined || startTime === null) {
        throw new Error("Missing the required parameter 'startTime' when calling apiV1StreamsStreamIdTemporalTaskPost");
      }
      // verify the required parameter 'endTime' is set
      if (endTime === undefined || endTime === null) {
        throw new Error("Missing the required parameter 'endTime' when calling apiV1StreamsStreamIdTemporalTaskPost");
      }
      // verify the required parameter 'detectorId' is set
      if (detectorId === undefined || detectorId === null) {
        throw new Error("Missing the required parameter 'detectorId' when calling apiV1StreamsStreamIdTemporalTaskPost");
      }

      let pathParams = {
        'streamId': streamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': name,
        'startTime': startTime,
        'endTime': endTime,
        'detectorId': detectorId,
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'csv'),
        'detectionThresholds': this.apiClient.buildCollectionParam(opts['detectionThresholds'], 'csv')
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApiV1StreamsStreamIdTemporalTaskPost200Response;
      return this.apiClient.callApi(
        '/api/v1/streams/{streamId}/temporal-task', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StreamsStreamIdTemporalTasksGet operation.
     * @callback module:api/TemporalTaskApi~apiV1StreamsStreamIdTemporalTasksGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1StreamsStreamIdTemporalTasksGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get stream temporal tasks
     * Fetches all Temporal Tasks for a stream
     * @param {String} streamId Unique ID of stream
     * @param {module:api/TemporalTaskApi~apiV1StreamsStreamIdTemporalTasksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1StreamsStreamIdTemporalTasksGet200Response}
     */
    apiV1StreamsStreamIdTemporalTasksGet(streamId, callback) {
      let postBody = null;
      // verify the required parameter 'streamId' is set
      if (streamId === undefined || streamId === null) {
        throw new Error("Missing the required parameter 'streamId' when calling apiV1StreamsStreamIdTemporalTasksGet");
      }

      let pathParams = {
        'streamId': streamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV1StreamsStreamIdTemporalTasksGet200Response;
      return this.apiClient.callApi(
        '/api/v1/streams/{streamId}/temporal-tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1TemporalTaskPost operation.
     * @callback module:api/TemporalTaskApi~apiV1TemporalTaskPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1StreamsStreamIdTemporalTaskPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create temporal task
     * Localize actions in a video using specified detectors and labels
     * @param {String} name Name of the temporal task
     * @param {Object} opts Optional parameters
     * @param {File} [file] Video file to process
     * @param {String} [url] URL of the video to process
     * @param {String} [videoId] ID of an existing video
     * @param {String} [detectorId] ID of detector use for localization
     * @param {Array.<String>} [labels] Array of labels to detect
     * @param {module:api/TemporalTaskApi~apiV1TemporalTaskPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1StreamsStreamIdTemporalTaskPost200Response}
     */
    apiV1TemporalTaskPost(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling apiV1TemporalTaskPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': name,
        'file': opts['file'],
        'url': opts['url'],
        'videoId': opts['videoId'],
        'detectorId': opts['detectorId'],
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'csv')
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApiV1StreamsStreamIdTemporalTaskPost200Response;
      return this.apiClient.callApi(
        '/api/v1/temporal-task', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1TemporalTasksGet operation.
     * @callback module:api/TemporalTaskApi~apiV1TemporalTasksGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1TemporalTasksGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get existing temporal tasks
     * Fetches all Temporal Tasks for a user
     * @param {module:api/TemporalTaskApi~apiV1TemporalTasksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1TemporalTasksGet200Response}
     */
    apiV1TemporalTasksGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV1TemporalTasksGet200Response;
      return this.apiClient.callApi(
        '/api/v1/temporal-tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1TemporalTasksTaskIdDelete operation.
     * @callback module:api/TemporalTaskApi~apiV1TemporalTasksTaskIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1TemporalTasksTaskIdDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete temporal task
     * Deletes an existing Temporal Task
     * @param {String} taskId Unique ID of temporal task
     * @param {module:api/TemporalTaskApi~apiV1TemporalTasksTaskIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1TemporalTasksTaskIdDelete200Response}
     */
    apiV1TemporalTasksTaskIdDelete(taskId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling apiV1TemporalTasksTaskIdDelete");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV1TemporalTasksTaskIdDelete200Response;
      return this.apiClient.callApi(
        '/api/v1/temporal-tasks/{taskId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1TemporalTasksTaskIdGet operation.
     * @callback module:api/TemporalTaskApi~apiV1TemporalTasksTaskIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1TemporalTasksTaskIdGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get temporal task details
     * Fetches details about an existing Temporal Task, e.g. one that was run on a video file input
     * @param {String} taskId Unique ID of temporal task
     * @param {module:api/TemporalTaskApi~apiV1TemporalTasksTaskIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1TemporalTasksTaskIdGet200Response}
     */
    apiV1TemporalTasksTaskIdGet(taskId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling apiV1TemporalTasksTaskIdGet");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV1TemporalTasksTaskIdGet200Response;
      return this.apiClient.callApi(
        '/api/v1/temporal-tasks/{taskId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1TemporalTasksTaskIdKillPut operation.
     * @callback module:api/TemporalTaskApi~apiV1TemporalTasksTaskIdKillPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1TemporalTasksTaskIdKillPut200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Kill temporal task
     * Kills an existing temporal task
     * @param {String} taskId Unique ID of temporal task
     * @param {module:api/TemporalTaskApi~apiV1TemporalTasksTaskIdKillPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1TemporalTasksTaskIdKillPut200Response}
     */
    apiV1TemporalTasksTaskIdKillPut(taskId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling apiV1TemporalTasksTaskIdKillPut");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV1TemporalTasksTaskIdKillPut200Response;
      return this.apiClient.callApi(
        '/api/v1/temporal-tasks/{taskId}/kill', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1TemporalTasksTaskIdPredsJsonGet operation.
     * @callback module:api/TemporalTaskApi~apiV1TemporalTasksTaskIdPredsJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get temporal task prediction results
     * Downloads an existing Temporal Task's predictions as JSON file stream
     * @param {String} taskId ID of the temporal task
     * @param {module:api/TemporalTaskApi~apiV1TemporalTasksTaskIdPredsJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiV1TemporalTasksTaskIdPredsJsonGet(taskId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling apiV1TemporalTasksTaskIdPredsJsonGet");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/temporal-tasks/{taskId}/preds.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
