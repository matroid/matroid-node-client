/**
 * Matroid Public API
 * The Matroid API allows you to easily manipulate and use detectors. You can browse through our fine-tuned detectors, customize detectors with your own images and videos, and even import your own tensorflow models as detectors. Public detectors are available for all of our users, and you can quickly train custom detectors when needed. You can further polish your detectors through our simple web GUI, where you can create composite detectors or topic detectors, give your detectors feedback, and automatically annotate training data.   Once you are happy with your detector, you can use it to classify images, locate objects in videos, and perform real-time detections in live video streams. Create a stream of your camera feed, and you can use our API to get real-time detections from your detector by creating Monitorings. You can also use our API to get the latest detections from your detector, and you can even get the latest detections from a specific time in the past. Feel free to use this documentation page to learn and test out your API requests. But be careful! **Any changes performed may be permanent.**   ## Getting Started  To get started with the Matroid API, you will need to create an account and obtain an API key. You can do this by signing up on our website. Once you have your API key, you can start using the API to create and manage detectors.  ## Authentication  The Matroid API uses bearer token authentication. You will need to include your API key in the Authorization header of your requests. For example:  ``` Authorization: Bearer YOUR_API_KEY ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiV1BucketTasksPost200Response from '../model/ApiV1BucketTasksPost200Response';
import ApiV1BucketTasksPost400Response from '../model/ApiV1BucketTasksPost400Response';
import ApiV1BucketTasksPostRequest from '../model/ApiV1BucketTasksPostRequest';

/**
* BucketTasks service.
* @module api/BucketTasksApi
* @version 1.0.0
*/
export default class BucketTasksApi {

    /**
    * Constructs a new BucketTasksApi. 
    * @alias module:api/BucketTasksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV1BucketTasksPost operation.
     * @callback module:api/BucketTasksApi~apiV1BucketTasksPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1BucketTasksPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create S3 bucket CSV task
     * Creates a new task for running a detector over an S3 bucket. Only available for Matroid on-prem users.
     * @param {module:model/ApiV1BucketTasksPostRequest} apiV1BucketTasksPostRequest 
     * @param {module:api/BucketTasksApi~apiV1BucketTasksPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1BucketTasksPost200Response}
     */
    apiV1BucketTasksPost(apiV1BucketTasksPostRequest, callback) {
      let postBody = apiV1BucketTasksPostRequest;
      // verify the required parameter 'apiV1BucketTasksPostRequest' is set
      if (apiV1BucketTasksPostRequest === undefined || apiV1BucketTasksPostRequest === null) {
        throw new Error("Missing the required parameter 'apiV1BucketTasksPostRequest' when calling apiV1BucketTasksPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiV1BucketTasksPost200Response;
      return this.apiClient.callApi(
        '/api/v1/bucket-tasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1BucketTasksTaskIdDownloadResultsGet operation.
     * @callback module:api/BucketTasksApi~apiV1BucketTasksTaskIdDownloadResultsGetCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download bucket search CSV
     * Returns the results of processing a bucket with a detector in CSV format. Only available to Matroid on-prem users.
     * @param {String} taskId Unique ID of the bucket task
     * @param {module:api/BucketTasksApi~apiV1BucketTasksTaskIdDownloadResultsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    apiV1BucketTasksTaskIdDownloadResultsGet(taskId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling apiV1BucketTasksTaskIdDownloadResultsGet");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['text/csv', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/api/v1/bucket-tasks/{taskId}/download_results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
