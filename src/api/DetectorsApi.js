/**
 * Matroid Public API
 * The Matroid API allows you to easily manipulate and use detectors. You can browse through our fine-tuned detectors, customize detectors with your own images and videos, and even import your own tensorflow models as detectors. Public detectors are available for all of our users, and you can quickly train custom detectors when needed. You can further polish your detectors through our simple web GUI, where you can create composite detectors or topic detectors, give your detectors feedback, and automatically annotate training data.   Once you are happy with your detector, you can use it to classify images, locate objects in videos, and perform real-time detections in live video streams. Create a stream of your camera feed, and you can use our API to get real-time detections from your detector by creating Monitorings. You can also use our API to get the latest detections from your detector, and you can even get the latest detections from a specific time in the past. Feel free to use this documentation page to learn and test out your API requests. But be careful! **Any changes performed may be permanent.**   ## Getting Started  To get started with the Matroid API, you will need to create an account and obtain an API key. You can do this by signing up on our website. Once you have your API key, you can start using the API to create and manage detectors.  ## Authentication  The Matroid API uses bearer token authentication. You will need to include your API key in the Authorization header of your requests. For example:  ``` Authorization: Bearer YOUR_API_KEY ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiV1BucketTasksPost400Response from '../model/ApiV1BucketTasksPost400Response';
import ApiV1DetectorsDetectorIdDelete200Response from '../model/ApiV1DetectorsDetectorIdDelete200Response';
import ApiV1DetectorsDetectorIdFeedbackFeedbackIdDelete200Response from '../model/ApiV1DetectorsDetectorIdFeedbackFeedbackIdDelete200Response';
import ApiV1DetectorsDetectorIdFeedbackGet200ResponseInner from '../model/ApiV1DetectorsDetectorIdFeedbackGet200ResponseInner';
import ApiV1DetectorsDetectorIdFeedbackImagePost200Response from '../model/ApiV1DetectorsDetectorIdFeedbackImagePost200Response';
import ApiV1DetectorsDetectorIdFeedbackPost200Response from '../model/ApiV1DetectorsDetectorIdFeedbackPost200Response';
import ApiV1DetectorsDetectorIdFeedbackPostRequestFeedbackInner from '../model/ApiV1DetectorsDetectorIdFeedbackPostRequestFeedbackInner';
import ApiV1DetectorsDetectorIdFinalizePost200Response from '../model/ApiV1DetectorsDetectorIdFinalizePost200Response';
import ApiV1DetectorsDetectorIdGet200Response from '../model/ApiV1DetectorsDetectorIdGet200Response';
import ApiV1DetectorsDetectorIdMigrateDownPut200Response from '../model/ApiV1DetectorsDetectorIdMigrateDownPut200Response';
import ApiV1DetectorsDetectorIdMigratePut200Response from '../model/ApiV1DetectorsDetectorIdMigratePut200Response';
import ApiV1DetectorsDetectorIdRedoPost200Response from '../model/ApiV1DetectorsDetectorIdRedoPost200Response';
import ApiV1DetectorsGet200ResponseInner from '../model/ApiV1DetectorsGet200ResponseInner';
import ApiV1DetectorsSearchGet200ResponseInner from '../model/ApiV1DetectorsSearchGet200ResponseInner';
import ApiV1DetectorsUploadPost200Response from '../model/ApiV1DetectorsUploadPost200Response';
import CreateDetector200Response from '../model/CreateDetector200Response';

/**
* Detectors service.
* @module api/DetectorsApi
* @version 1.0.0
*/
export default class DetectorsApi {

    /**
    * Constructs a new DetectorsApi. 
    * @alias module:api/DetectorsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV1DetectorsDetectorIdDelete operation.
     * @callback module:api/DetectorsApi~apiV1DetectorsDetectorIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1DetectorsDetectorIdDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a detector
     * Deletes a detector. Requires the `processing` field on the detector to equal `false`.
     * @param {String} detectorId Unique ID of the detector to be deleted
     * @param {module:api/DetectorsApi~apiV1DetectorsDetectorIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1DetectorsDetectorIdDelete200Response}
     */
    apiV1DetectorsDetectorIdDelete(detectorId, callback) {
      let postBody = null;
      // verify the required parameter 'detectorId' is set
      if (detectorId === undefined || detectorId === null) {
        throw new Error("Missing the required parameter 'detectorId' when calling apiV1DetectorsDetectorIdDelete");
      }

      let pathParams = {
        'detectorId': detectorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV1DetectorsDetectorIdDelete200Response;
      return this.apiClient.callApi(
        '/api/v1/detectors/{detectorId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1DetectorsDetectorIdFeedbackFeedbackIdDelete operation.
     * @callback module:api/DetectorsApi~apiV1DetectorsDetectorIdFeedbackFeedbackIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1DetectorsDetectorIdFeedbackFeedbackIdDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete detector feedback
     * Delete feedback you've previously given a detector.
     * @param {String} detectorId Unique ID of the detector feedback was added to
     * @param {String} feedbackId Unique ID of the feedback you're deleting
     * @param {module:api/DetectorsApi~apiV1DetectorsDetectorIdFeedbackFeedbackIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1DetectorsDetectorIdFeedbackFeedbackIdDelete200Response}
     */
    apiV1DetectorsDetectorIdFeedbackFeedbackIdDelete(detectorId, feedbackId, callback) {
      let postBody = null;
      // verify the required parameter 'detectorId' is set
      if (detectorId === undefined || detectorId === null) {
        throw new Error("Missing the required parameter 'detectorId' when calling apiV1DetectorsDetectorIdFeedbackFeedbackIdDelete");
      }
      // verify the required parameter 'feedbackId' is set
      if (feedbackId === undefined || feedbackId === null) {
        throw new Error("Missing the required parameter 'feedbackId' when calling apiV1DetectorsDetectorIdFeedbackFeedbackIdDelete");
      }

      let pathParams = {
        'detectorId': detectorId,
        'feedbackId': feedbackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV1DetectorsDetectorIdFeedbackFeedbackIdDelete200Response;
      return this.apiClient.callApi(
        '/api/v1/detectors/{detectorId}/feedback/{feedbackId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1DetectorsDetectorIdFeedbackGet operation.
     * @callback module:api/DetectorsApi~apiV1DetectorsDetectorIdFeedbackGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApiV1DetectorsDetectorIdFeedbackGet200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get detector feedback
     * Retrieve feedback for a detector, either as raw feedback or counts by label.
     * @param {String} detectorId Unique ID of the detector to get feedback for
     * @param {Object} opts Optional parameters
     * @param {Boolean} [counts = false)] Whether to return raw feedback or just counts by label. Defaults to raw feedback.
     * @param {module:api/DetectorsApi~apiV1DetectorsDetectorIdFeedbackGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApiV1DetectorsDetectorIdFeedbackGet200ResponseInner>}
     */
    apiV1DetectorsDetectorIdFeedbackGet(detectorId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'detectorId' is set
      if (detectorId === undefined || detectorId === null) {
        throw new Error("Missing the required parameter 'detectorId' when calling apiV1DetectorsDetectorIdFeedbackGet");
      }

      let pathParams = {
        'detectorId': detectorId
      };
      let queryParams = {
        'counts': opts['counts']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ApiV1DetectorsDetectorIdFeedbackGet200ResponseInner];
      return this.apiClient.callApi(
        '/api/v1/detectors/{detectorId}/feedback', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1DetectorsDetectorIdFeedbackImagePost operation.
     * @callback module:api/DetectorsApi~apiV1DetectorsDetectorIdFeedbackImagePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1DetectorsDetectorIdFeedbackImagePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add image feedback to a detector
     * Add image as feedback to your detector from a local file or URL. Feedback images will be added as unannotated training data when retraining your detector.
     * @param {String} detectorId Unique ID of the detector to give feedback to
     * @param {String} labelName Which label to add image feedback to
     * @param {Object} opts Optional parameters
     * @param {File} [file] Local file to add as feedback
     * @param {String} [url] URL of the image to add as feedback
     * @param {String} [source] Additional metadata to track the source of submitted feedback
     * @param {module:api/DetectorsApi~apiV1DetectorsDetectorIdFeedbackImagePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1DetectorsDetectorIdFeedbackImagePost200Response}
     */
    apiV1DetectorsDetectorIdFeedbackImagePost(detectorId, labelName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'detectorId' is set
      if (detectorId === undefined || detectorId === null) {
        throw new Error("Missing the required parameter 'detectorId' when calling apiV1DetectorsDetectorIdFeedbackImagePost");
      }
      // verify the required parameter 'labelName' is set
      if (labelName === undefined || labelName === null) {
        throw new Error("Missing the required parameter 'labelName' when calling apiV1DetectorsDetectorIdFeedbackImagePost");
      }

      let pathParams = {
        'detectorId': detectorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file'],
        'url': opts['url'],
        'labelName': labelName,
        'source': opts['source']
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApiV1DetectorsDetectorIdFeedbackImagePost200Response;
      return this.apiClient.callApi(
        '/api/v1/detectors/{detectorId}/feedback_image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1DetectorsDetectorIdFeedbackPost operation.
     * @callback module:api/DetectorsApi~apiV1DetectorsDetectorIdFeedbackPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1DetectorsDetectorIdFeedbackPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add feedback to a detector
     * Add feedback to your detector from a local file or URL. You can add positive feedback to reinforce detector predictions, or negative feedback to correct detector mistakes. Feedback is not taken into account until you retrain your detector. If a localizer detector predicted multiple object bounding box, you should give feedback for each bounding box in a single request.
     * @param {String} detectorId Unique ID of the detector to give feedback to
     * @param {Array.<module:model/ApiV1DetectorsDetectorIdFeedbackPostRequestFeedbackInner>} feedback Array of feedback information
     * @param {Object} opts Optional parameters
     * @param {String} [url] URL of the image to add feedback for
     * @param {File} [file] Local file to add feedback for
     * @param {module:api/DetectorsApi~apiV1DetectorsDetectorIdFeedbackPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1DetectorsDetectorIdFeedbackPost200Response}
     */
    apiV1DetectorsDetectorIdFeedbackPost(detectorId, feedback, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'detectorId' is set
      if (detectorId === undefined || detectorId === null) {
        throw new Error("Missing the required parameter 'detectorId' when calling apiV1DetectorsDetectorIdFeedbackPost");
      }
      // verify the required parameter 'feedback' is set
      if (feedback === undefined || feedback === null) {
        throw new Error("Missing the required parameter 'feedback' when calling apiV1DetectorsDetectorIdFeedbackPost");
      }

      let pathParams = {
        'detectorId': detectorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'url': opts['url'],
        'file': opts['file'],
        'feedback': this.apiClient.buildCollectionParam(feedback, 'csv')
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApiV1DetectorsDetectorIdFeedbackPost200Response;
      return this.apiClient.callApi(
        '/api/v1/detectors/{detectorId}/feedback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1DetectorsDetectorIdFinalizePost operation.
     * @callback module:api/DetectorsApi~apiV1DetectorsDetectorIdFinalizePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1DetectorsDetectorIdFinalizePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Train detector
     * Requires the `processing` field on the detector to equal `false`. Starts training asynchronously and sets the `processing` field to `true`.
     * @param {String} detectorId Unique ID of the detector to train
     * @param {module:api/DetectorsApi~apiV1DetectorsDetectorIdFinalizePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1DetectorsDetectorIdFinalizePost200Response}
     */
    apiV1DetectorsDetectorIdFinalizePost(detectorId, callback) {
      let postBody = null;
      // verify the required parameter 'detectorId' is set
      if (detectorId === undefined || detectorId === null) {
        throw new Error("Missing the required parameter 'detectorId' when calling apiV1DetectorsDetectorIdFinalizePost");
      }

      let pathParams = {
        'detectorId': detectorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV1DetectorsDetectorIdFinalizePost200Response;
      return this.apiClient.callApi(
        '/api/v1/detectors/{detectorId}/finalize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1DetectorsDetectorIdGet operation.
     * @callback module:api/DetectorsApi~apiV1DetectorsDetectorIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1DetectorsDetectorIdGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get detector info
     * Retrieves information about the specified detector
     * @param {String} detectorId Unique ID of the detector
     * @param {module:api/DetectorsApi~apiV1DetectorsDetectorIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1DetectorsDetectorIdGet200Response}
     */
    apiV1DetectorsDetectorIdGet(detectorId, callback) {
      let postBody = null;
      // verify the required parameter 'detectorId' is set
      if (detectorId === undefined || detectorId === null) {
        throw new Error("Missing the required parameter 'detectorId' when calling apiV1DetectorsDetectorIdGet");
      }

      let pathParams = {
        'detectorId': detectorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV1DetectorsDetectorIdGet200Response;
      return this.apiClient.callApi(
        '/api/v1/detectors/{detectorId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1DetectorsDetectorIdMigrateDownPut operation.
     * @callback module:api/DetectorsApi~apiV1DetectorsDetectorIdMigrateDownPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1DetectorsDetectorIdMigrateDownPut200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Migrate a detector back to the legacy studio
     * Reverts the 'migrated' and 'useDataset' flags for a detector that was previously migrated up. Only detectors in the 'pending' state and marked as 'migrated' can be reverted.
     * @param {String} detectorId The ID of the detector to migrate back to the legacy studio
     * @param {module:api/DetectorsApi~apiV1DetectorsDetectorIdMigrateDownPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1DetectorsDetectorIdMigrateDownPut200Response}
     */
    apiV1DetectorsDetectorIdMigrateDownPut(detectorId, callback) {
      let postBody = null;
      // verify the required parameter 'detectorId' is set
      if (detectorId === undefined || detectorId === null) {
        throw new Error("Missing the required parameter 'detectorId' when calling apiV1DetectorsDetectorIdMigrateDownPut");
      }

      let pathParams = {
        'detectorId': detectorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV1DetectorsDetectorIdMigrateDownPut200Response;
      return this.apiClient.callApi(
        '/api/v1/detectors/{detectorId}/migrate-down', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1DetectorsDetectorIdMigratePut operation.
     * @callback module:api/DetectorsApi~apiV1DetectorsDetectorIdMigratePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1DetectorsDetectorIdMigratePut200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Migrate detector to new studio
     * Converts a pending detector into the new studio format and returns the new dataset ID. Data for new studio detectors is stored in a dataset consisting of annotated images and labels.
     * @param {String} detectorId Unique ID of the detector to migrate
     * @param {module:api/DetectorsApi~apiV1DetectorsDetectorIdMigratePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1DetectorsDetectorIdMigratePut200Response}
     */
    apiV1DetectorsDetectorIdMigratePut(detectorId, callback) {
      let postBody = null;
      // verify the required parameter 'detectorId' is set
      if (detectorId === undefined || detectorId === null) {
        throw new Error("Missing the required parameter 'detectorId' when calling apiV1DetectorsDetectorIdMigratePut");
      }

      let pathParams = {
        'detectorId': detectorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV1DetectorsDetectorIdMigratePut200Response;
      return this.apiClient.callApi(
        '/api/v1/detectors/{detectorId}/migrate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1DetectorsDetectorIdRedoPost operation.
     * @callback module:api/DetectorsApi~apiV1DetectorsDetectorIdRedoPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1DetectorsDetectorIdRedoPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Redo detector
     * Note: a deep copy of the trained detector with a different `detectorId` will be made.
     * @param {String} detectorId Unique ID of the detector to redo
     * @param {Object} opts Optional parameters
     * @param {Boolean} [feedbackOnly] Whether to retrain the detector only on images from feedback
     * @param {module:api/DetectorsApi~apiV1DetectorsDetectorIdRedoPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1DetectorsDetectorIdRedoPost200Response}
     */
    apiV1DetectorsDetectorIdRedoPost(detectorId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'detectorId' is set
      if (detectorId === undefined || detectorId === null) {
        throw new Error("Missing the required parameter 'detectorId' when calling apiV1DetectorsDetectorIdRedoPost");
      }

      let pathParams = {
        'detectorId': detectorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'feedbackOnly': opts['feedbackOnly']
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ApiV1DetectorsDetectorIdRedoPost200Response;
      return this.apiClient.callApi(
        '/api/v1/detectors/{detectorId}/redo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1DetectorsGet operation.
     * @callback module:api/DetectorsApi~apiV1DetectorsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApiV1DetectorsGet200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List detectors (Deprecated)
     * Retrieves a list of detectors. This endpoint is deprecated, use the search endpoint instead.
     * @param {module:api/DetectorsApi~apiV1DetectorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApiV1DetectorsGet200ResponseInner>}
     */
    apiV1DetectorsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ApiV1DetectorsGet200ResponseInner];
      return this.apiClient.callApi(
        '/api/v1/detectors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1DetectorsSearchGet operation.
     * @callback module:api/DetectorsApi~apiV1DetectorsSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApiV1DetectorsSearchGet200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search detectors
     * Returns detectors that match the query.
     * @param {Object} opts Optional parameters
     * @param {String} [id] Matches the detector with this ID. If this field is specified, only a single detector should be returned
     * @param {String} [name] Matches detectors with names that contain a word that begins with the specified value for this field
     * @param {String} [label] Matches detectors with at least one label that contains a word that begins with the specified value for this field
     * @param {Boolean} [published = false)] If set to `false`, only searches user-owned detectors. If set to `true`, only searches published detectors
     * @param {module:model/String} [detectorType] Type of detector to search for
     * @param {module:model/String} [state = 'trained')] State of the detector
     * @param {String} [categoryId] Category ID to filter by (e.g., 'People', 'Technology', 'Industrial IoT')
     * @param {Number} [limit = 100)] Maximum number of query results returned
     * @param {Number} [offset = 0)] Number of query results skipped
     * @param {Boolean} [includeImageClasses = false)] Whether to include image classes in the response
     * @param {module:api/DetectorsApi~apiV1DetectorsSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApiV1DetectorsSearchGet200ResponseInner>}
     */
    apiV1DetectorsSearchGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'label': opts['label'],
        'published': opts['published'],
        'detectorType': opts['detectorType'],
        'state': opts['state'],
        'categoryId': opts['categoryId'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'includeImageClasses': opts['includeImageClasses']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ApiV1DetectorsSearchGet200ResponseInner];
      return this.apiClient.callApi(
        '/api/v1/detectors/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1DetectorsUploadPost operation.
     * @callback module:api/DetectorsApi~apiV1DetectorsUploadPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1DetectorsUploadPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import a detector
     * Imports a detector into Matroid. Certain combinations of parameters can be supplied: `fileDetector`, `fileProto` + `fileLabel` (+ `fileLabelInd`), or `fileProto` + `labels` (+ `labelInds`). The parameters in parentheses can be optionally supplied for object detection.
     * @param {String} name Name of the detector
     * @param {Object} opts Optional parameters
     * @param {File} [fileDetector] `.matroid` file
     * @param {File} [fileProto] Frozen inference graph `.pb` file
     * @param {File} [fileLabel] Label `.txt` file, one line per class
     * @param {File} [fileLabelInd] Label index `.txt` file, one line per index
     * @param {Array.<String>} [labels] List of labels for the detector
     * @param {Array.<String>} [labelInds] List of label indices for the detector
     * @param {String} [inputTensor] Input tensor name with size (e.g. `ToFloat[600,600,3]`)
     * @param {String} [outputTensor] Output tensor name(s) with size (e.g. `detection_boxes[100,4],detection_classes[100],detection_scores[100]`)
     * @param {module:model/String} [detectorType] Type of the detector
     * @param {module:api/DetectorsApi~apiV1DetectorsUploadPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1DetectorsUploadPost200Response}
     */
    apiV1DetectorsUploadPost(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling apiV1DetectorsUploadPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': name,
        'fileDetector': opts['fileDetector'],
        'fileProto': opts['fileProto'],
        'fileLabel': opts['fileLabel'],
        'fileLabelInd': opts['fileLabelInd'],
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'csv'),
        'labelInds': this.apiClient.buildCollectionParam(opts['labelInds'], 'csv'),
        'inputTensor': opts['inputTensor'],
        'outputTensor': opts['outputTensor'],
        'detectorType': opts['detectorType']
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApiV1DetectorsUploadPost200Response;
      return this.apiClient.callApi(
        '/api/v1/detectors/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDetector operation.
     * @callback module:api/DetectorsApi~createDetectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDetector200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create detector
     * Asynchronously creates a detector (sets the `processing` field on the detector to `true`).  Note: calling this API creates a pending detector, and you can update this detector with more images by calling this API with `detectorId`. However, creating more than one pending detector is not allowed, so you need to finalize or delete your existing pending detector before creating a new one.  You can only add new labels to your pending detector with this route. If you want to add images to existing labels, please use the route for updating labels with images. The zip file size limit is 2 GB, and the limit for each image inside the zip is 10 MB. 
     * @param {String} name Name of the detector. Required when creating a new detector.
     * @param {String} detectorType `general`, `facial_recognition`, `facial_characteristics`, `single_shot_detector`, `panoptic`. Required when creating a new detector.
     * @param {File} file Zip file of images. Supported formats: - Matroid format: `zip/label_name/_*.(jpg|jpeg|png)`, with optional bounding box CSV (`zip/bbox.csv` containing columns `left`, `top`, `right`, `bottom`, `label`, `type`, `file`). - COCO format: `zip/_*.(jpg|jpeg|png)`. 
     * @param {Object} opts Optional parameters
     * @param {String} [detectorId] If provided, updates this pending detector with more images.
     * @param {File} [labelsJSON] JSON file in COCO format.
     * @param {module:api/DetectorsApi~createDetectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDetector200Response}
     */
    createDetector(name, detectorType, file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createDetector");
      }
      // verify the required parameter 'detectorType' is set
      if (detectorType === undefined || detectorType === null) {
        throw new Error("Missing the required parameter 'detectorType' when calling createDetector");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling createDetector");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': name,
        'detectorType': detectorType,
        'detectorId': opts['detectorId'],
        'file': file,
        'labelsJSON': opts['labelsJSON']
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CreateDetector200Response;
      return this.apiClient.callApi(
        '/api/v1/detectors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
