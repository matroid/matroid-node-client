/**
 * Matroid Public API
 * The Matroid API allows you to easily manipulate and use detectors. You can browse through our fine-tuned detectors, customize detectors with your own images and videos, and even import your own tensorflow models as detectors. Public detectors are available for all of our users, and you can quickly train custom detectors when needed. You can further polish your detectors through our simple web GUI, where you can create composite detectors or topic detectors, give your detectors feedback, and automatically annotate training data.   Once you are happy with your detector, you can use it to classify images, locate objects in videos, and perform real-time detections in live video streams. Create a stream of your camera feed, and you can use our API to get real-time detections from your detector by creating Monitorings. You can also use our API to get the latest detections from your detector, and you can even get the latest detections from a specific time in the past. Feel free to use this documentation page to learn and test out your API requests. But be careful! **Any changes performed may be permanent.**   ## Getting Started  To get started with the Matroid API, you will need to create an account and obtain an API key. You can do this by signing up on our website. Once you have your API key, you can start using the API to create and manage detectors.  ## Authentication  The Matroid API uses bearer token authentication. You will need to include your API key in the Authorization header of your requests. For example:  ``` Authorization: Bearer YOUR_API_KEY ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiV1BucketTasksPost400Response from '../model/ApiV1BucketTasksPost400Response';
import ApiV1CollectionTasksTaskIdDelete200Response from '../model/ApiV1CollectionTasksTaskIdDelete200Response';
import ApiV1CollectionTasksTaskIdGet200Response from '../model/ApiV1CollectionTasksTaskIdGet200Response';
import ApiV1CollectionTasksTaskIdImageQueryPost200Response from '../model/ApiV1CollectionTasksTaskIdImageQueryPost200Response';
import ApiV1CollectionTasksTaskIdImageQueryPostRequestBoundingBox from '../model/ApiV1CollectionTasksTaskIdImageQueryPostRequestBoundingBox';
import ApiV1CollectionTasksTaskIdKillPost200Response from '../model/ApiV1CollectionTasksTaskIdKillPost200Response';
import ApiV1CollectionTasksTaskIdPut200Response from '../model/ApiV1CollectionTasksTaskIdPut200Response';
import ApiV1CollectionTasksTaskIdPutRequest from '../model/ApiV1CollectionTasksTaskIdPutRequest';
import ApiV1CollectionTasksTaskIdScoresQueryPost200Response from '../model/ApiV1CollectionTasksTaskIdScoresQueryPost200Response';
import ApiV1CollectionTasksTaskIdScoresQueryPostRequest from '../model/ApiV1CollectionTasksTaskIdScoresQueryPostRequest';
import ApiV1CollectionTasksTaskIdTextQueryPost200Response from '../model/ApiV1CollectionTasksTaskIdTextQueryPost200Response';
import ApiV1CollectionsCollectionIdCollectionTasksPost200Response from '../model/ApiV1CollectionsCollectionIdCollectionTasksPost200Response';
import ApiV1CollectionsCollectionIdDelete200Response from '../model/ApiV1CollectionsCollectionIdDelete200Response';
import ApiV1CollectionsCollectionIdGet200Response from '../model/ApiV1CollectionsCollectionIdGet200Response';
import ApiV1CollectionsPost200Response from '../model/ApiV1CollectionsPost200Response';

/**
* SimilaritySearch service.
* @module api/SimilaritySearchApi
* @version 1.0.0
*/
export default class SimilaritySearchApi {

    /**
    * Constructs a new SimilaritySearchApi. 
    * @alias module:api/SimilaritySearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV1CollectionTasksTaskIdDelete operation.
     * @callback module:api/SimilaritySearchApi~apiV1CollectionTasksTaskIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1CollectionTasksTaskIdDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete collection index
     * Deletes a completed collection task
     * @param {String} taskId Unique ID of the collection task to delete
     * @param {module:api/SimilaritySearchApi~apiV1CollectionTasksTaskIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1CollectionTasksTaskIdDelete200Response}
     */
    apiV1CollectionTasksTaskIdDelete(taskId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling apiV1CollectionTasksTaskIdDelete");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV1CollectionTasksTaskIdDelete200Response;
      return this.apiClient.callApi(
        '/api/v1/collection-tasks/{taskId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1CollectionTasksTaskIdGet operation.
     * @callback module:api/SimilaritySearchApi~apiV1CollectionTasksTaskIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1CollectionTasksTaskIdGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collection index
     * Retrieves information about a specific collection task
     * @param {String} taskId Unique ID of the collection task to retrieve
     * @param {module:api/SimilaritySearchApi~apiV1CollectionTasksTaskIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1CollectionTasksTaskIdGet200Response}
     */
    apiV1CollectionTasksTaskIdGet(taskId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling apiV1CollectionTasksTaskIdGet");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV1CollectionTasksTaskIdGet200Response;
      return this.apiClient.callApi(
        '/api/v1/collection-tasks/{taskId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1CollectionTasksTaskIdImageQueryPost operation.
     * @callback module:api/SimilaritySearchApi~apiV1CollectionTasksTaskIdImageQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1CollectionTasksTaskIdImageQueryPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query collection index by image
     * Queries against a collection index using an image
     * @param {String} taskId Unique ID of the collection task to query
     * @param {Object} opts Optional parameters
     * @param {String} [url] URL of the query image
     * @param {File} [file] Image file to use for query
     * @param {module:model/ApiV1CollectionTasksTaskIdImageQueryPostRequestBoundingBox} [boundingBox] 
     * @param {Number} [numResults] Number of results to return
     * @param {Boolean} [shouldIndicateDuplicates] Whether to indicate duplicate results
     * @param {module:api/SimilaritySearchApi~apiV1CollectionTasksTaskIdImageQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1CollectionTasksTaskIdImageQueryPost200Response}
     */
    apiV1CollectionTasksTaskIdImageQueryPost(taskId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling apiV1CollectionTasksTaskIdImageQueryPost");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'url': opts['url'],
        'file': opts['file'],
        'boundingBox': opts['boundingBox'],
        'numResults': opts['numResults'],
        'shouldIndicateDuplicates': opts['shouldIndicateDuplicates']
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApiV1CollectionTasksTaskIdImageQueryPost200Response;
      return this.apiClient.callApi(
        '/api/v1/collection-tasks/{taskId}/image-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1CollectionTasksTaskIdKillPost operation.
     * @callback module:api/SimilaritySearchApi~apiV1CollectionTasksTaskIdKillPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1CollectionTasksTaskIdKillPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Kill collection index
     * Kills an active collection indexing task
     * @param {String} taskId Unique ID of the collection task to kill
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeCollectionInfo] Whether to include information about the task's collection in the response
     * @param {module:api/SimilaritySearchApi~apiV1CollectionTasksTaskIdKillPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1CollectionTasksTaskIdKillPost200Response}
     */
    apiV1CollectionTasksTaskIdKillPost(taskId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling apiV1CollectionTasksTaskIdKillPost");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
        'includeCollectionInfo': opts['includeCollectionInfo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV1CollectionTasksTaskIdKillPost200Response;
      return this.apiClient.callApi(
        '/api/v1/collection-tasks/{taskId}/kill', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1CollectionTasksTaskIdPut operation.
     * @callback module:api/SimilaritySearchApi~apiV1CollectionTasksTaskIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1CollectionTasksTaskIdPut200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update collection index
     * Updates a collection index
     * @param {String} taskId Unique ID of the collection task to update
     * @param {module:model/ApiV1CollectionTasksTaskIdPutRequest} apiV1CollectionTasksTaskIdPutRequest 
     * @param {module:api/SimilaritySearchApi~apiV1CollectionTasksTaskIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1CollectionTasksTaskIdPut200Response}
     */
    apiV1CollectionTasksTaskIdPut(taskId, apiV1CollectionTasksTaskIdPutRequest, callback) {
      let postBody = apiV1CollectionTasksTaskIdPutRequest;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling apiV1CollectionTasksTaskIdPut");
      }
      // verify the required parameter 'apiV1CollectionTasksTaskIdPutRequest' is set
      if (apiV1CollectionTasksTaskIdPutRequest === undefined || apiV1CollectionTasksTaskIdPutRequest === null) {
        throw new Error("Missing the required parameter 'apiV1CollectionTasksTaskIdPutRequest' when calling apiV1CollectionTasksTaskIdPut");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiV1CollectionTasksTaskIdPut200Response;
      return this.apiClient.callApi(
        '/api/v1/collection-tasks/{taskId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1CollectionTasksTaskIdScoresQueryPost operation.
     * @callback module:api/SimilaritySearchApi~apiV1CollectionTasksTaskIdScoresQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1CollectionTasksTaskIdScoresQueryPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query collection index by detector scores
     * Queries against a collection index using a set of labels and scores
     * @param {String} taskId Unique ID of the collection task to query
     * @param {module:model/ApiV1CollectionTasksTaskIdScoresQueryPostRequest} apiV1CollectionTasksTaskIdScoresQueryPostRequest 
     * @param {module:api/SimilaritySearchApi~apiV1CollectionTasksTaskIdScoresQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1CollectionTasksTaskIdScoresQueryPost200Response}
     */
    apiV1CollectionTasksTaskIdScoresQueryPost(taskId, apiV1CollectionTasksTaskIdScoresQueryPostRequest, callback) {
      let postBody = apiV1CollectionTasksTaskIdScoresQueryPostRequest;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling apiV1CollectionTasksTaskIdScoresQueryPost");
      }
      // verify the required parameter 'apiV1CollectionTasksTaskIdScoresQueryPostRequest' is set
      if (apiV1CollectionTasksTaskIdScoresQueryPostRequest === undefined || apiV1CollectionTasksTaskIdScoresQueryPostRequest === null) {
        throw new Error("Missing the required parameter 'apiV1CollectionTasksTaskIdScoresQueryPostRequest' when calling apiV1CollectionTasksTaskIdScoresQueryPost");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiV1CollectionTasksTaskIdScoresQueryPost200Response;
      return this.apiClient.callApi(
        '/api/v1/collection-tasks/{taskId}/scores-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1CollectionTasksTaskIdTextQueryPost operation.
     * @callback module:api/SimilaritySearchApi~apiV1CollectionTasksTaskIdTextQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1CollectionTasksTaskIdTextQueryPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query collection index by text
     * Queries against a collection index using text, only available for indices created with a text-aligned model
     * @param {String} taskId Unique ID of the collection task to query against
     * @param {String} queryText Query text to search for
     * @param {Object} opts Optional parameters
     * @param {Number} [numResults] Maximum number of query results (default: 20)
     * @param {Array.<String>} [taskIds] Optional list of task IDs to query against
     * @param {module:api/SimilaritySearchApi~apiV1CollectionTasksTaskIdTextQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1CollectionTasksTaskIdTextQueryPost200Response}
     */
    apiV1CollectionTasksTaskIdTextQueryPost(taskId, queryText, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling apiV1CollectionTasksTaskIdTextQueryPost");
      }
      // verify the required parameter 'queryText' is set
      if (queryText === undefined || queryText === null) {
        throw new Error("Missing the required parameter 'queryText' when calling apiV1CollectionTasksTaskIdTextQueryPost");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'queryText': queryText,
        'numResults': opts['numResults'],
        'taskIds': this.apiClient.buildCollectionParam(opts['taskIds'], 'csv')
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApiV1CollectionTasksTaskIdTextQueryPost200Response;
      return this.apiClient.callApi(
        '/api/v1/collection-tasks/{taskId}/text-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1CollectionsCollectionIdCollectionTasksPost operation.
     * @callback module:api/SimilaritySearchApi~apiV1CollectionsCollectionIdCollectionTasksPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1CollectionsCollectionIdCollectionTasksPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create collection index
     * Creates an index on a collection with a detector
     * @param {String} collectionId Unique ID of the collection to search
     * @param {String} detectorId ID of the detector to use for indexing
     * @param {Object} opts Optional parameters
     * @param {String} [fileTypes] Types of files to index (e.g., 'images')
     * @param {module:api/SimilaritySearchApi~apiV1CollectionsCollectionIdCollectionTasksPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1CollectionsCollectionIdCollectionTasksPost200Response}
     */
    apiV1CollectionsCollectionIdCollectionTasksPost(collectionId, detectorId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling apiV1CollectionsCollectionIdCollectionTasksPost");
      }
      // verify the required parameter 'detectorId' is set
      if (detectorId === undefined || detectorId === null) {
        throw new Error("Missing the required parameter 'detectorId' when calling apiV1CollectionsCollectionIdCollectionTasksPost");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'detectorId': detectorId,
        'fileTypes': opts['fileTypes']
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ApiV1CollectionsCollectionIdCollectionTasksPost200Response;
      return this.apiClient.callApi(
        '/api/v1/collections/{collectionId}/collection-tasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1CollectionsCollectionIdDelete operation.
     * @callback module:api/SimilaritySearchApi~apiV1CollectionsCollectionIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1CollectionsCollectionIdDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete collection
     * Deletes a collection with no active indexing tasks
     * @param {String} collectionId Unique ID of the collection to delete
     * @param {module:api/SimilaritySearchApi~apiV1CollectionsCollectionIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1CollectionsCollectionIdDelete200Response}
     */
    apiV1CollectionsCollectionIdDelete(collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling apiV1CollectionsCollectionIdDelete");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV1CollectionsCollectionIdDelete200Response;
      return this.apiClient.callApi(
        '/api/v1/collections/{collectionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1CollectionsCollectionIdGet operation.
     * @callback module:api/SimilaritySearchApi~apiV1CollectionsCollectionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1CollectionsCollectionIdGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collection
     * Retrieves information about a specific collection
     * @param {String} collectionId Unique ID of the collection to retrieve
     * @param {module:api/SimilaritySearchApi~apiV1CollectionsCollectionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1CollectionsCollectionIdGet200Response}
     */
    apiV1CollectionsCollectionIdGet(collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling apiV1CollectionsCollectionIdGet");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV1CollectionsCollectionIdGet200Response;
      return this.apiClient.callApi(
        '/api/v1/collections/{collectionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1CollectionsPost operation.
     * @callback module:api/SimilaritySearchApi~apiV1CollectionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1CollectionsPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create collection
     * Creates a new collection from a web or S3 url
     * @param {String} name Name of the collection
     * @param {String} url URL of the source (web or S3)
     * @param {module:model/String} sourceType Type of source (s3 or web)
     * @param {Object} opts Optional parameters
     * @param {Boolean} [indexWithDefault] Whether to index with default settings
     * @param {module:api/SimilaritySearchApi~apiV1CollectionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1CollectionsPost200Response}
     */
    apiV1CollectionsPost(name, url, sourceType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling apiV1CollectionsPost");
      }
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling apiV1CollectionsPost");
      }
      // verify the required parameter 'sourceType' is set
      if (sourceType === undefined || sourceType === null) {
        throw new Error("Missing the required parameter 'sourceType' when calling apiV1CollectionsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': name,
        'url': url,
        'sourceType': sourceType,
        'indexWithDefault': opts['indexWithDefault']
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ApiV1CollectionsPost200Response;
      return this.apiClient.callApi(
        '/api/v1/collections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
