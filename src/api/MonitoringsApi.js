/**
 * Matroid Public API
 * The Matroid API allows you to easily manipulate and use detectors. You can browse through our fine-tuned detectors, customize detectors with your own images and videos, and even import your own tensorflow models as detectors. Public detectors are available for all of our users, and you can quickly train custom detectors when needed. You can further polish your detectors through our simple web GUI, where you can create composite detectors or topic detectors, give your detectors feedback, and automatically annotate training data.   Once you are happy with your detector, you can use it to classify images, locate objects in videos, and perform real-time detections in live video streams. Create a stream of your camera feed, and you can use our API to get real-time detections from your detector by creating Monitorings. You can also use our API to get the latest detections from your detector, and you can even get the latest detections from a specific time in the past. Feel free to use this documentation page to learn and test out your API requests. But be careful! **Any changes performed may be permanent.**   ## Getting Started  To get started with the Matroid API, you will need to create an account and obtain an API key. You can do this by signing up on our website. Once you have your API key, you can start using the API to create and manage detectors.  ## Authentication  The Matroid API uses bearer token authentication. You will need to include your API key in the Authorization header of your requests. For example:  ``` Authorization: Bearer YOUR_API_KEY ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiV1BucketTasksPost400Response from '../model/ApiV1BucketTasksPost400Response';
import ApiV1MonitoringsBatchPut200Response from '../model/ApiV1MonitoringsBatchPut200Response';
import ApiV1MonitoringsBatchPutRequest from '../model/ApiV1MonitoringsBatchPutRequest';
import ApiV1MonitoringsGet200ResponseInner from '../model/ApiV1MonitoringsGet200ResponseInner';
import ApiV1MonitoringsMonitoringIdDelete200Response from '../model/ApiV1MonitoringsMonitoringIdDelete200Response';
import ApiV1MonitoringsMonitoringIdGet200ResponseInner from '../model/ApiV1MonitoringsMonitoringIdGet200ResponseInner';
import ApiV1MonitoringsMonitoringIdKillPost200Response from '../model/ApiV1MonitoringsMonitoringIdKillPost200Response';
import ApiV1MonitoringsMonitoringIdPut200Response from '../model/ApiV1MonitoringsMonitoringIdPut200Response';
import ApiV1MonitoringsMonitoringIdPutRequest from '../model/ApiV1MonitoringsMonitoringIdPutRequest';
import ApiV1MonitoringsMonitoringIdWatchGet200Response from '../model/ApiV1MonitoringsMonitoringIdWatchGet200Response';
import ApiV1StreamsStreamIdMonitorDetectorIdPost200Response from '../model/ApiV1StreamsStreamIdMonitorDetectorIdPost200Response';
import ApiV1StreamsStreamIdMonitorDetectorIdPostRequest from '../model/ApiV1StreamsStreamIdMonitorDetectorIdPostRequest';

/**
* Monitorings service.
* @module api/MonitoringsApi
* @version 1.0.0
*/
export default class MonitoringsApi {

    /**
    * Constructs a new MonitoringsApi. 
    * @alias module:api/MonitoringsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV1MonitoringsBatchPut operation.
     * @callback module:api/MonitoringsApi~apiV1MonitoringsBatchPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1MonitoringsBatchPut200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk update monitorings
     * Updates settings on multiple monitorings. Currently, only thresholds, notification alert sounds, and registered endpoints can be updated using this api. If you have a need to expose other settings via this endpoint, please contact solutions@matroid.com.
     * @param {module:model/ApiV1MonitoringsBatchPutRequest} apiV1MonitoringsBatchPutRequest 
     * @param {module:api/MonitoringsApi~apiV1MonitoringsBatchPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1MonitoringsBatchPut200Response}
     */
    apiV1MonitoringsBatchPut(apiV1MonitoringsBatchPutRequest, callback) {
      let postBody = apiV1MonitoringsBatchPutRequest;
      // verify the required parameter 'apiV1MonitoringsBatchPutRequest' is set
      if (apiV1MonitoringsBatchPutRequest === undefined || apiV1MonitoringsBatchPutRequest === null) {
        throw new Error("Missing the required parameter 'apiV1MonitoringsBatchPutRequest' when calling apiV1MonitoringsBatchPut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiV1MonitoringsBatchPut200Response;
      return this.apiClient.callApi(
        '/api/v1/monitorings/batch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1MonitoringsGet operation.
     * @callback module:api/MonitoringsApi~apiV1MonitoringsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApiV1MonitoringsGet200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search monitorings
     * Returns monitorings that match the specified query parameters
     * @param {Object} opts Optional parameters
     * @param {String} [streamId] Unique ID of the stream
     * @param {String} [monitoringId] Unique ID of the monitoring
     * @param {String} [detectorId] Unique ID of the detector
     * @param {String} [name] Name of the monitoring
     * @param {Date} [startTime] Queries for monitorings that begin after startTime
     * @param {Date} [endTime] Queries for monitorings that begin before endTime
     * @param {module:model/String} [state] Filter monitorings by state
     * @param {module:api/MonitoringsApi~apiV1MonitoringsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApiV1MonitoringsGet200ResponseInner>}
     */
    apiV1MonitoringsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'streamId': opts['streamId'],
        'monitoringId': opts['monitoringId'],
        'detectorId': opts['detectorId'],
        'name': opts['name'],
        'startTime': opts['startTime'],
        'endTime': opts['endTime'],
        'state': opts['state']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ApiV1MonitoringsGet200ResponseInner];
      return this.apiClient.callApi(
        '/api/v1/monitorings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1MonitoringsMonitoringIdDelete operation.
     * @callback module:api/MonitoringsApi~apiV1MonitoringsMonitoringIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1MonitoringsMonitoringIdDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a monitoring
     * Deletes a monitoring and all associated resources including feed tasks and collections
     * @param {String} monitoringId Unique ID of the monitoring to delete
     * @param {module:api/MonitoringsApi~apiV1MonitoringsMonitoringIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1MonitoringsMonitoringIdDelete200Response}
     */
    apiV1MonitoringsMonitoringIdDelete(monitoringId, callback) {
      let postBody = null;
      // verify the required parameter 'monitoringId' is set
      if (monitoringId === undefined || monitoringId === null) {
        throw new Error("Missing the required parameter 'monitoringId' when calling apiV1MonitoringsMonitoringIdDelete");
      }

      let pathParams = {
        'monitoringId': monitoringId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV1MonitoringsMonitoringIdDelete200Response;
      return this.apiClient.callApi(
        '/api/v1/monitorings/{monitoringId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1MonitoringsMonitoringIdGet operation.
     * @callback module:api/MonitoringsApi~apiV1MonitoringsMonitoringIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApiV1MonitoringsMonitoringIdGet200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get monitoring results
     * Retrieves results for a monitoring in the specified format
     * @param {String} monitoringId Unique ID of the monitoring
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format = 'json')] Format of the results
     * @param {Boolean} [statusOnly = false)] Whether to return the general status of the monitoring (instead of detailed prediction data)
     * @param {Date} [startTime] Start of the time range to download prediction data for. Only used when statusOnly is false
     * @param {Date} [endTime] End of the time range to download prediction data for. Only used when statusOnly is false
     * @param {module:api/MonitoringsApi~apiV1MonitoringsMonitoringIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApiV1MonitoringsMonitoringIdGet200ResponseInner>}
     */
    apiV1MonitoringsMonitoringIdGet(monitoringId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'monitoringId' is set
      if (monitoringId === undefined || monitoringId === null) {
        throw new Error("Missing the required parameter 'monitoringId' when calling apiV1MonitoringsMonitoringIdGet");
      }

      let pathParams = {
        'monitoringId': monitoringId
      };
      let queryParams = {
        'format': opts['format'],
        'statusOnly': opts['statusOnly'],
        'startTime': opts['startTime'],
        'endTime': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv', 'text/plain'];
      let returnType = [ApiV1MonitoringsMonitoringIdGet200ResponseInner];
      return this.apiClient.callApi(
        '/api/v1/monitorings/{monitoringId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1MonitoringsMonitoringIdKillPost operation.
     * @callback module:api/MonitoringsApi~apiV1MonitoringsMonitoringIdKillPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1MonitoringsMonitoringIdKillPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Kill a monitoring
     * Stops a monitoring task and its associated processes
     * @param {String} monitoringId Unique ID of the monitoring to kill
     * @param {module:api/MonitoringsApi~apiV1MonitoringsMonitoringIdKillPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1MonitoringsMonitoringIdKillPost200Response}
     */
    apiV1MonitoringsMonitoringIdKillPost(monitoringId, callback) {
      let postBody = null;
      // verify the required parameter 'monitoringId' is set
      if (monitoringId === undefined || monitoringId === null) {
        throw new Error("Missing the required parameter 'monitoringId' when calling apiV1MonitoringsMonitoringIdKillPost");
      }

      let pathParams = {
        'monitoringId': monitoringId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV1MonitoringsMonitoringIdKillPost200Response;
      return this.apiClient.callApi(
        '/api/v1/monitorings/{monitoringId}/kill', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1MonitoringsMonitoringIdPut operation.
     * @callback module:api/MonitoringsApi~apiV1MonitoringsMonitoringIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1MonitoringsMonitoringIdPut200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a monitoring
     * Update an existing monitoring with new parameters
     * @param {String} monitoringId Unique ID of the monitoring to update
     * @param {module:model/ApiV1MonitoringsMonitoringIdPutRequest} apiV1MonitoringsMonitoringIdPutRequest 
     * @param {module:api/MonitoringsApi~apiV1MonitoringsMonitoringIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1MonitoringsMonitoringIdPut200Response}
     */
    apiV1MonitoringsMonitoringIdPut(monitoringId, apiV1MonitoringsMonitoringIdPutRequest, callback) {
      let postBody = apiV1MonitoringsMonitoringIdPutRequest;
      // verify the required parameter 'monitoringId' is set
      if (monitoringId === undefined || monitoringId === null) {
        throw new Error("Missing the required parameter 'monitoringId' when calling apiV1MonitoringsMonitoringIdPut");
      }
      // verify the required parameter 'apiV1MonitoringsMonitoringIdPutRequest' is set
      if (apiV1MonitoringsMonitoringIdPutRequest === undefined || apiV1MonitoringsMonitoringIdPutRequest === null) {
        throw new Error("Missing the required parameter 'apiV1MonitoringsMonitoringIdPutRequest' when calling apiV1MonitoringsMonitoringIdPut");
      }

      let pathParams = {
        'monitoringId': monitoringId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiV1MonitoringsMonitoringIdPut200Response;
      return this.apiClient.callApi(
        '/api/v1/monitorings/{monitoringId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1MonitoringsMonitoringIdWatchGet operation.
     * @callback module:api/MonitoringsApi~apiV1MonitoringsMonitoringIdWatchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1MonitoringsMonitoringIdWatchGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Watch for new detections
     * Streams new detection results from this monitoring live as they occur. Detections are streamed using Server-sent events, which are effectively long-lived HTTP requests, where detection results are written out as they occur. This can be an alternative to setting up a web API endpoint for your monitoring. NOTE: If not using our API libraries, be sure to restart the connection when it closes and disable any buffering to ensure you get results live. Our API libraries take care of this automatically.
     * @param {String} monitoringId Unique ID of the monitoring
     * @param {module:api/MonitoringsApi~apiV1MonitoringsMonitoringIdWatchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1MonitoringsMonitoringIdWatchGet200Response}
     */
    apiV1MonitoringsMonitoringIdWatchGet(monitoringId, callback) {
      let postBody = null;
      // verify the required parameter 'monitoringId' is set
      if (monitoringId === undefined || monitoringId === null) {
        throw new Error("Missing the required parameter 'monitoringId' when calling apiV1MonitoringsMonitoringIdWatchGet");
      }

      let pathParams = {
        'monitoringId': monitoringId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['text/event-stream', 'application/json'];
      let returnType = ApiV1MonitoringsMonitoringIdWatchGet200Response;
      return this.apiClient.callApi(
        '/api/v1/monitorings/{monitoringId}/watch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StreamsStreamIdMonitorDetectorIdPost operation.
     * @callback module:api/MonitoringsApi~apiV1StreamsStreamIdMonitorDetectorIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1StreamsStreamIdMonitorDetectorIdPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a monitoring on a stream
     * Creates a monitoring task on a stream using a specified detector with configurable thresholds, scheduling, and notification settings
     * @param {String} streamId Unique ID of the stream to monitor
     * @param {String} detectorId Unique ID of the detector with which to classify
     * @param {module:model/ApiV1StreamsStreamIdMonitorDetectorIdPostRequest} apiV1StreamsStreamIdMonitorDetectorIdPostRequest 
     * @param {module:api/MonitoringsApi~apiV1StreamsStreamIdMonitorDetectorIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1StreamsStreamIdMonitorDetectorIdPost200Response}
     */
    apiV1StreamsStreamIdMonitorDetectorIdPost(streamId, detectorId, apiV1StreamsStreamIdMonitorDetectorIdPostRequest, callback) {
      let postBody = apiV1StreamsStreamIdMonitorDetectorIdPostRequest;
      // verify the required parameter 'streamId' is set
      if (streamId === undefined || streamId === null) {
        throw new Error("Missing the required parameter 'streamId' when calling apiV1StreamsStreamIdMonitorDetectorIdPost");
      }
      // verify the required parameter 'detectorId' is set
      if (detectorId === undefined || detectorId === null) {
        throw new Error("Missing the required parameter 'detectorId' when calling apiV1StreamsStreamIdMonitorDetectorIdPost");
      }
      // verify the required parameter 'apiV1StreamsStreamIdMonitorDetectorIdPostRequest' is set
      if (apiV1StreamsStreamIdMonitorDetectorIdPostRequest === undefined || apiV1StreamsStreamIdMonitorDetectorIdPostRequest === null) {
        throw new Error("Missing the required parameter 'apiV1StreamsStreamIdMonitorDetectorIdPostRequest' when calling apiV1StreamsStreamIdMonitorDetectorIdPost");
      }

      let pathParams = {
        'streamId': streamId,
        'detectorId': detectorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiV1StreamsStreamIdMonitorDetectorIdPost200Response;
      return this.apiClient.callApi(
        '/api/v1/streams/{streamId}/monitor/{detectorId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
