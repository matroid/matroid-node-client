/**
 * Matroid Public API
 * The Matroid API allows you to easily manipulate and use detectors. You can browse through our fine-tuned detectors, customize detectors with your own images and videos, and even import your own tensorflow models as detectors. Public detectors are available for all of our users, and you can quickly train custom detectors when needed. You can further polish your detectors through our simple web GUI, where you can create composite detectors or topic detectors, give your detectors feedback, and automatically annotate training data.   Once you are happy with your detector, you can use it to classify images, locate objects in videos, and perform real-time detections in live video streams. Create a stream of your camera feed, and you can use our API to get real-time detections from your detector by creating Monitorings. You can also use our API to get the latest detections from your detector, and you can even get the latest detections from a specific time in the past. Feel free to use this documentation page to learn and test out your API requests. But be careful! **Any changes performed may be permanent.**   ## Getting Started  To get started with the Matroid API, you will need to create an account and obtain an API key. You can do this by signing up on our website. Once you have your API key, you can start using the API to create and manage detectors.  ## Authentication  The Matroid API uses bearer token authentication. You will need to include your API key in the Authorization header of your requests. For example:  ``` Authorization: Bearer YOUR_API_KEY ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiV1BucketTasksPost400Response from '../model/ApiV1BucketTasksPost400Response';
import ApiV1StreamsStreamIdSummariesGet200Response from '../model/ApiV1StreamsStreamIdSummariesGet200Response';
import ApiV1StreamsStreamIdSummarizePost200Response from '../model/ApiV1StreamsStreamIdSummarizePost200Response';
import ApiV1SummariesGet200Response from '../model/ApiV1SummariesGet200Response';
import ApiV1SummariesSummaryIdDelete200Response from '../model/ApiV1SummariesSummaryIdDelete200Response';
import ApiV1SummariesSummaryIdGet200Response from '../model/ApiV1SummariesSummaryIdGet200Response';

/**
* VideoSummary service.
* @module api/VideoSummaryApi
* @version 1.0.0
*/
export default class VideoSummaryApi {

    /**
    * Constructs a new VideoSummaryApi. 
    * @alias module:api/VideoSummaryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV1StreamsStreamIdSummariesGet operation.
     * @callback module:api/VideoSummaryApi~apiV1StreamsStreamIdSummariesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1StreamsStreamIdSummariesGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get stream summaries
     * Fetches all summaries for a stream
     * @param {String} streamId Unique ID of stream
     * @param {module:api/VideoSummaryApi~apiV1StreamsStreamIdSummariesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1StreamsStreamIdSummariesGet200Response}
     */
    apiV1StreamsStreamIdSummariesGet(streamId, callback) {
      let postBody = null;
      // verify the required parameter 'streamId' is set
      if (streamId === undefined || streamId === null) {
        throw new Error("Missing the required parameter 'streamId' when calling apiV1StreamsStreamIdSummariesGet");
      }

      let pathParams = {
        'streamId': streamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV1StreamsStreamIdSummariesGet200Response;
      return this.apiClient.callApi(
        '/api/v1/streams/{streamId}/summaries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StreamsStreamIdSummarizePost operation.
     * @callback module:api/VideoSummaryApi~apiV1StreamsStreamIdSummarizePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1StreamsStreamIdSummarizePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create stream summary
     * Creates a video summary from a stream
     * @param {String} streamId Unique ID of the stream to summarize
     * @param {String} name Video summary name
     * @param {Date} startTime Video summary start time
     * @param {Date} endTime Video summary end time
     * @param {String} detectorId ID of the Localizer to be used
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [tracker] Version of the tracker to be used
     * @param {String} [reid] Whether to use appearance for tracking
     * @param {String} [trackingOnly] Whether to upload crops or just perform tracking
     * @param {Array.<String>} [labels] List of human names of labels to be localized
     * @param {Number} [fps] Frames per second to process the Stream
     * @param {Number} [mcLambda] Weight tradeoff between appearance and motion features for matching
     * @param {Number} [matchingDistance] Distance threshold for matching
     * @param {Boolean} [generateSummaryVideo = false)] Whether to generate static video mp4 on backend
     * @param {Number} [maxIouDist] IOU distance threshold for matching
     * @param {Number} [maxAge] Max number of missed detections before deleting a track
     * @param {Number} [nInit] Number of frames to wait before assigning a track to a detection
     * @param {Number} [nnBudget] Number of feature vectors saved for each track
     * @param {Number} [detectionThreshold] Confidence threshold for detector
     * @param {module:api/VideoSummaryApi~apiV1StreamsStreamIdSummarizePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1StreamsStreamIdSummarizePost200Response}
     */
    apiV1StreamsStreamIdSummarizePost(streamId, name, startTime, endTime, detectorId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'streamId' is set
      if (streamId === undefined || streamId === null) {
        throw new Error("Missing the required parameter 'streamId' when calling apiV1StreamsStreamIdSummarizePost");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling apiV1StreamsStreamIdSummarizePost");
      }
      // verify the required parameter 'startTime' is set
      if (startTime === undefined || startTime === null) {
        throw new Error("Missing the required parameter 'startTime' when calling apiV1StreamsStreamIdSummarizePost");
      }
      // verify the required parameter 'endTime' is set
      if (endTime === undefined || endTime === null) {
        throw new Error("Missing the required parameter 'endTime' when calling apiV1StreamsStreamIdSummarizePost");
      }
      // verify the required parameter 'detectorId' is set
      if (detectorId === undefined || detectorId === null) {
        throw new Error("Missing the required parameter 'detectorId' when calling apiV1StreamsStreamIdSummarizePost");
      }

      let pathParams = {
        'streamId': streamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': name,
        'startTime': startTime,
        'endTime': endTime,
        'detectorId': detectorId,
        'tracker': opts['tracker'],
        'reid': opts['reid'],
        'trackingOnly': opts['trackingOnly'],
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'csv'),
        'fps': opts['fps'],
        'mcLambda': opts['mcLambda'],
        'matchingDistance': opts['matchingDistance'],
        'generateSummaryVideo': opts['generateSummaryVideo'],
        'maxIouDist': opts['maxIouDist'],
        'maxAge': opts['maxAge'],
        'nInit': opts['nInit'],
        'nnBudget': opts['nnBudget'],
        'detectionThreshold': opts['detectionThreshold']
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApiV1StreamsStreamIdSummarizePost200Response;
      return this.apiClient.callApi(
        '/api/v1/streams/{streamId}/summarize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1SummariesGet operation.
     * @callback module:api/VideoSummaryApi~apiV1SummariesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1SummariesGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get existing summaries
     * Fetches all summaries for a user
     * @param {module:api/VideoSummaryApi~apiV1SummariesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1SummariesGet200Response}
     */
    apiV1SummariesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV1SummariesGet200Response;
      return this.apiClient.callApi(
        '/api/v1/summaries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1SummariesSummaryIdDelete operation.
     * @callback module:api/VideoSummaryApi~apiV1SummariesSummaryIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1SummariesSummaryIdDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete video summary
     * Deletes an existing video summary
     * @param {String} summaryId Unique ID of video summary
     * @param {module:api/VideoSummaryApi~apiV1SummariesSummaryIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1SummariesSummaryIdDelete200Response}
     */
    apiV1SummariesSummaryIdDelete(summaryId, callback) {
      let postBody = null;
      // verify the required parameter 'summaryId' is set
      if (summaryId === undefined || summaryId === null) {
        throw new Error("Missing the required parameter 'summaryId' when calling apiV1SummariesSummaryIdDelete");
      }

      let pathParams = {
        'summaryId': summaryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV1SummariesSummaryIdDelete200Response;
      return this.apiClient.callApi(
        '/api/v1/summaries/{summaryId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1SummariesSummaryIdGet operation.
     * @callback module:api/VideoSummaryApi~apiV1SummariesSummaryIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1SummariesSummaryIdGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get video summary
     * Fetches an existing video summary
     * @param {String} summaryId Unique ID of video summary
     * @param {module:api/VideoSummaryApi~apiV1SummariesSummaryIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1SummariesSummaryIdGet200Response}
     */
    apiV1SummariesSummaryIdGet(summaryId, callback) {
      let postBody = null;
      // verify the required parameter 'summaryId' is set
      if (summaryId === undefined || summaryId === null) {
        throw new Error("Missing the required parameter 'summaryId' when calling apiV1SummariesSummaryIdGet");
      }

      let pathParams = {
        'summaryId': summaryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV1SummariesSummaryIdGet200Response;
      return this.apiClient.callApi(
        '/api/v1/summaries/{summaryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1SummariesSummaryIdTracksCsvGet operation.
     * @callback module:api/VideoSummaryApi~apiV1SummariesSummaryIdTracksCsvGetCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get video summary tracks CSV
     * Downloads an existing video summary's tracks as CSV file stream
     * @param {String} summaryId ID of the video summary to get tracks for
     * @param {module:api/VideoSummaryApi~apiV1SummariesSummaryIdTracksCsvGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    apiV1SummariesSummaryIdTracksCsvGet(summaryId, callback) {
      let postBody = null;
      // verify the required parameter 'summaryId' is set
      if (summaryId === undefined || summaryId === null) {
        throw new Error("Missing the required parameter 'summaryId' when calling apiV1SummariesSummaryIdTracksCsvGet");
      }

      let pathParams = {
        'summaryId': summaryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['text/csv', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/api/v1/summaries/{summaryId}/tracks.csv', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1SummariesSummaryIdVideoMp4Get operation.
     * @callback module:api/VideoSummaryApi~apiV1SummariesSummaryIdVideoMp4GetCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get video summary mp4 file
     * Downloads an existing video summary's mp4 file as a stream
     * @param {String} summaryId Unique ID of video summary
     * @param {module:api/VideoSummaryApi~apiV1SummariesSummaryIdVideoMp4GetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    apiV1SummariesSummaryIdVideoMp4Get(summaryId, callback) {
      let postBody = null;
      // verify the required parameter 'summaryId' is set
      if (summaryId === undefined || summaryId === null) {
        throw new Error("Missing the required parameter 'summaryId' when calling apiV1SummariesSummaryIdVideoMp4Get");
      }

      let pathParams = {
        'summaryId': summaryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['video/mp4'];
      let returnType = File;
      return this.apiClient.callApi(
        '/api/v1/summaries/{summaryId}/video.mp4', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
